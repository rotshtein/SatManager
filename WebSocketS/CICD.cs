// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CICD.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CICD {

  /// <summary>Holder for reflection information generated from CICD.proto</summary>
  public static partial class CICDReflection {

    #region Descriptor
    /// <summary>File descriptor for CICD.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CICDReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpDSUNELnByb3RvEgRDSUNEIk4KBkhlYWRlchIQCghzZXF1ZW5jZRgBIAEo",
            "BRIcCgZvcGNvZGUYAiABKA4yDC5DSUNELk9QQ09ERRIUCgxtZXNzYWdlX2Rh",
            "dGEYAyABKAwi0wEKDmNvbmZpZ3VyZV9TV0ZFEhAKCGZpbGVuYW1lGAEgASgJ",
            "EigKD2lucHV0c2lnbmFsdHlwZRgCIAEoDjIPLkNJQ0QuSW5wdXRUeXBlEjEK",
            "GmlucHV0c2lnbmFsc3VidHlwZWZyb21maWxlGAMgASgOMg0uQ0lDRC5TdWJU",
            "eXBlEg4KBmZlaW5oehgEIAEoAhIMCgRmY2h6GAUgASgCEhIKCnVzZWZ1bGJ3",
            "aHoYBiABKAISDgoGZ2FpbmRiGAcgASgCEhAKCHdpZGViYW5kGAggASgIImQK",
            "DmNvbmZpZ3VyZV9IV0ZFEg4KBmZlaW5oehgEIAEoAhIMCgRmY2h6GAUgASgC",
            "EhIKCnVzZWZ1bGJ3aHoYBiABKAISDgoGZ2FpbmRiGAcgASgCEhAKCHdpZGVi",
            "YW5kGAggASgIIh8KCElkZW50aWZ5EhMKC2NuY2FycmllcmRiGAEgASgCIoYB",
            "ChNJZGVudGlmeUFuZFNlcGFyYXRlEhMKC2NuY2FycmllcmRiGAEgASgCEiAK",
            "Bm91dHB1dBgCIAEoDjIQLkNJQ0Qub3V0cHV0VHlwZRIQCghmaWxlTmFtZRgD",
            "IAEoCRISCgpvdXRwdXQxVXJsGAQgASgJEhIKCm91dHB1dDJVcmwYBSABKAki",
            "5QEKC0NhcnJpZXJJbmZvEhEKCWFtcGxpdHVkZRgBIAEoAhIOCgZmcmVxSHoY",
            "AiABKAISEgoKYmF1ZFJhdGVCZBgDIAEoAhIMCgRuYnBzGAQgASgFEgoKAlJj",
            "GAUgASgCEiQKCm1vZHVsYXRpb24YBiABKA4yEC5DSUNELk1vZHVsYXRpb24S",
            "HgoHZmVjVHlwZRgHIAEoDjINLkNJQ0QuRmVjVHlwZRIWCgNGZWMYCCABKA4y",
            "CS5DSUNELkZFQxInCgxzcGVjdHJ1bVR5cGUYCSABKA4yES5DSUNELlNwZWN0",
            "cmVUeXBlIp4BCglDaWNTdGF0dXMSEgoKY2ljUHJlc2VudBgCIAEoCBINCgVl",
            "cnJOYhgDIAEoBRIMCgRmY0h6GAQgASgCEhYKDmNvbXBvc2l0ZVNuckRCGAUg",
            "ASgCEiMKCGNhcnJpZXIxGAYgASgLMhEuQ0lDRC5DYXJyaWVySW5mbxIjCghj",
            "YXJyaWVyMhgHIAEoCzIRLkNJQ0QuQ2FycmllckluZm8i2gkKEE1vbml0b3Jp",
            "bmdSZXBvcnQSEQoJb3V0cHV0Uk1TGAEgASgBEhEKCXBlYWtWYWx1ZRgCIAEo",
            "ARIQCghuQml0c01hZxgDIAEoDRILCgNtYXgYBCABKAESDgoGdGhyZXNoGAUg",
            "ASgBEgwKBG5Ub3QYBiABKAQSFAoMbkFib3ZlVGhyZXNoGAcgASgEEhAKCEZF",
            "c3RhdHVzGAggASgIEhIKCkZFRXJyb3JNc2cYCSABKAkSEAoIdGVtcEhXRkUY",
            "CiABKAUSFQoNbWFqb3JNYWluRlBHQRgLIAEoDRIVCg1taW5vck1haW5GUEdB",
            "GAwgASgNEhMKC3VNYWpvckNvcHJvGA0gASgNEhMKC3VNaW5vckNvcHJvGA4g",
            "ASgNEhUKDXVWYXJpYW50Q29wcm8YDyABKA0SFQoNSFdGRVNXVmVyc2lvbhgQ",
            "IAEoCRIRCgl0ZW1wQm9hZDEYFCABKAUSEQoJdGVtcEJvYWQyGBUgASgFEhcK",
            "D3ZlcnNpb25GV0JvYXJkMRgWIAEoCRIXCg92ZXJzaW9uRldCb2FyZDIYFyAB",
            "KAkSFwoPdmVyc2lvblNXQm9hcmQxGBggASgJEhcKD3ZlcnNpb25TV0JvYXJk",
            "MhgZIAEoCRIPCgdtYWpvclNXGBogASgNEg8KB21pbm9yU1cYGyABKA0SFwoP",
            "c2VwYXJhdGlvblN0YXRlGCggASgIEhcKD25iU3ltYlNlcGFyYXRlZBgpIAEo",
            "BBIWCg5uYkRhdGFJbkJ1ZmZlchgqIAEoBBIYChBuYkRhdGFPdXRCdWZmZXIx",
            "GCsgASgEEhgKEG5iRGF0YU91dEJ1ZmZlcjIYLCABKAQSGAoQbmJEYXRhT3V0",
            "QnVmZmVyMxgtIAEoBBIYChBuYkRhdGFPdXRCdWZmZXI0GC4gASgEEhUKDXN5",
            "bmNocm9TdGF0ZTEYLyABKAgSFQoNc3luY2hyb1N0YXRlMhgwIAEoCBIYChBu",
            "YkRlY29kZWRGcmFtZXMxGDEgASgEEhgKEG5iRGVjb2RlZEZyYW1lczIYMiAB",
            "KAQSFgoObmJFcnJvckZyYW1lczEYMyABKAQSFgoObmJFcnJvckZyYW1lczIY",
            "NCABKAQSGAoQb3ZlcmZsb3dJbkJ1ZmZlchg1IAEoCBIaChJvdmVyZmxvd091",
            "dEJ1ZmZlcjEYNiABKAgSGgoSb3ZlcmZsb3dPdXRCdWZmZXIyGDcgASgIEhoK",
            "Em92ZXJmbG93T3V0QnVmZmVyMxg4IAEoCBIaChJvdmVyZmxvd091dEJ1ZmZl",
            "cjQYOSABKAgSEQoJc3RhdHVzQkUxGDogASgIEhEKCXN0YXR1c0JFMhg7IAEo",
            "CBITCgtCRTFFcnJvck1zZxg8IAEoCRITCgtCRTJFcnJvck1zZxg9IAEoCRIN",
            "CgVNU0VkQhhGIAEoAhINCgVDTjFkQhhHIAEoAhINCgVDTjJkQhhIIAEoAhIM",
            "CgRDTmRCGEkgASgCEh0KFW5Db25zdFBvaW50c0F2YWlsYWJsZRhKIAEoDRIX",
            "Cg9zb21lQ29uc3RQb2ludHMYSyADKAISEAoIZXJyb3JNc2cYTCABKAkSGAoQ",
            "Y2ljU3RhdHVzVXBkYXRlZBhNIAEoCBImCg1jdXJyZW50U3RhdHVzGE4gASgL",
            "Mg8uQ0lDRC5DaWNTdGF0dXMiKgoTRkVDb25mU3RhdHVzQ2hhbmdlZBITCgty",
            "ZXR1cm5fY29kZRgBIAEoCCIfChBhbGxGaWxlUHJvY2Vzc2VkEgsKA21zZxgB",
            "IAEoCSI7ChJTV0ZFX3N0YXRlX2NoYW5nZWQSJQoLcmV0dXJuX2NvZGUYASAB",
            "KA4yEC5DSUNELlNXRkVfc3RhdGUiOwoSSFdGRV9zdGF0ZV9jaGFuZ2VkEiUK",
            "C3JldHVybl9jb2RlGAEgASgOMhAuQ0lDRC5IV0ZFX3N0YXRlIikKCWdldEhl",
            "YWRlchIcCgZoZWFkZXIYASABKAsyDC5DSUNELkhlYWRlciI4Cgtsb2dfbWVz",
            "c2FnZRIcCgR0eXBlGAEgASgOMg4uQ0lDRC5zZXZlcml0eRILCgNtc2cYAiAB",
            "KAkqZwoKTW9kdWxhdGlvbhIICgRCUFNLEAASCAoEUVBTSxABEggKBFBTSzgQ",
            "AhIICgRRQU04EAMSCQoFUUFNMTYQBBIKCgZBUFNLMTYQBRIKCgZBUFNLMzIQ",
            "BhIOCgpVTktOT1dOTU9EEAcq2QEKA0ZFQxILCgdUUENfM180EAASCwoHVFBD",
            "XzdfOBABEgwKCFRQQ18wXzk1EAISDAoITERQQ18yXzMQAxIMCghMRFBDXzNf",
            "NBAEEg4KClZGRUNfMF81MzMQBRIOCgpWRkVDXzBfNjMxEAYSDgoKVkZFQ18w",
            "XzcwNhAHEg4KClZGRUNfMF84MDMQCBIOCgpWRkVDXzBfNTc2EAkSDgoKVkZF",
            "Q18wXzY0MhAKEg4KClZGRUNfMF83MTEQCxIOCgpWRkVDXzBfNzgwEAwSDgoK",
            "VU5LTk9XTkZFQxANKiIKCUlucHV0VHlwZRIICgRSRUFMEAASCwoHQ09NUExF",
            "WBABKmoKB1N1YlR5cGUSDwoLVFlQRV9VSU5UMTYQABIOCgpUWVBFX0lOVDE2",
            "EAESDwoLVFlQRV9VSU5UMzIQAhIMCghUWVBFX0lOVBADEg4KClRZUEVfRkxP",
            "QVQQBBIPCgtUWVBFX0RPVUJMRRAFKh4KDEZyb250ZW5kVHlwZRIGCgJIVxAA",
            "EgYKAlNXEAEqQQoKU1dGRV9zdGF0ZRIQCgxTV0ZFX1NUT1BQRUQQABIPCgtT",
            "V0ZFX1BBVVNFRBABEhAKDFNXRkVfUlVOTklORxACKjAKCkhXRkVfc3RhdGUS",
            "EAoMSFdGRV9TVE9QUEVEEAASEAoMSFdGRV9SVU5OSU5HEAEqPQoMQ0lDRF9G",
            "RXN0YXRlEg4KCkZFX1NUT1BQRUQQABINCglGRV9QQVVTRUQQARIOCgpGRV9S",
            "VU5OSU5HEAIqNAoLU3BlY3RyZVR5cGUSCwoHUkVHVUxBUhAAEgsKB0lOVkVS",
            "VDEQARILCgdJTlZFUlQyEAIqOgoHRmVjVHlwZRIHCgNUUEMQABIICgRMRFBD",
            "EAESCAoEVkZFQxACEhIKDlVOS05PV05GRUNUWVBFEAMqIwoKb3V0cHV0VHlw",
            "ZRIKCgZ0b0ZpbGUQABIJCgV0b1VEUBABKkcKCHNldmVyaXR5EggKBElORk8Q",
            "ABILCgdXQVJOSU5HEAESDAoIQ1JJVElDQUwQAhIJCgVGQVRBTBADEgsKB1VO",
            "S05PV04QBCr4AgoGT1BDT0RFEgoKBkhFQURFUhAAEgcKA0FDSxABEggKBE5B",
            "Q0sQAhISCg5DT05GSUdVUkVfU1dGRRADEhIKDkNPTkZJR1VSRV9IV0ZFEAQS",
            "DAoIU1RBUlRfRkUQBRILCgdTVE9QX0ZFEAYSCAoEU1RPUBATEgwKCElERU5U",
            "SUZZEAcSGQoVSURFTlRJRllfQU5EX1NFUEFSQVRFEAgSHQoZUkVRVUVTVF9N",
            "T05JVE9SSU5HX1JFUE9SVBAJEhkKFUZFX0NPTkZTVEFUVVNfQ0hBTkdFRBAK",
            "EhQKEEFMTEZJTEVQUk9DRVNTRUQQCxIWChJTV0ZFX1NUQVRFX0NIQU5HRUQQ",
            "DBIWChJIV0ZFX1NUQVRFX0NIQU5HRUQQDRIWChJDSUNEX1NUQVRFX0NIQU5H",
            "RUQQDhIVChFNT05JVE9SSU5HX1JFUE9SVBAPEg8KC0xPR19NRVNTQUdFEBAS",
            "GQoVSURFTlRJRklDQVRJT05fUkVQT1JUEBRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CICD.Modulation), typeof(global::CICD.FEC), typeof(global::CICD.InputType), typeof(global::CICD.SubType), typeof(global::CICD.FrontendType), typeof(global::CICD.SWFE_state), typeof(global::CICD.HWFE_state), typeof(global::CICD.CICD_FEstate), typeof(global::CICD.SpectreType), typeof(global::CICD.FecType), typeof(global::CICD.outputType), typeof(global::CICD.severity), typeof(global::CICD.OPCODE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.Header), global::CICD.Header.Parser, new[]{ "Sequence", "Opcode", "MessageData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.configure_SWFE), global::CICD.configure_SWFE.Parser, new[]{ "Filename", "Inputsignaltype", "Inputsignalsubtypefromfile", "Feinhz", "Fchz", "Usefulbwhz", "Gaindb", "Wideband" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.configure_HWFE), global::CICD.configure_HWFE.Parser, new[]{ "Feinhz", "Fchz", "Usefulbwhz", "Gaindb", "Wideband" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.Identify), global::CICD.Identify.Parser, new[]{ "Cncarrierdb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.IdentifyAndSeparate), global::CICD.IdentifyAndSeparate.Parser, new[]{ "Cncarrierdb", "Output", "FileName", "Output1Url", "Output2Url" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.CarrierInfo), global::CICD.CarrierInfo.Parser, new[]{ "Amplitude", "FreqHz", "BaudRateBd", "Nbps", "Rc", "Modulation", "FecType", "Fec", "SpectrumType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.CicStatus), global::CICD.CicStatus.Parser, new[]{ "CicPresent", "ErrNb", "FcHz", "CompositeSnrDB", "Carrier1", "Carrier2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.MonitoringReport), global::CICD.MonitoringReport.Parser, new[]{ "OutputRMS", "PeakValue", "NBitsMag", "Max", "Thresh", "NTot", "NAboveThresh", "FEstatus", "FEErrorMsg", "TempHWFE", "MajorMainFPGA", "MinorMainFPGA", "UMajorCopro", "UMinorCopro", "UVariantCopro", "HWFESWVersion", "TempBoad1", "TempBoad2", "VersionFWBoard1", "VersionFWBoard2", "VersionSWBoard1", "VersionSWBoard2", "MajorSW", "MinorSW", "SeparationState", "NbSymbSeparated", "NbDataInBuffer", "NbDataOutBuffer1", "NbDataOutBuffer2", "NbDataOutBuffer3", "NbDataOutBuffer4", "SynchroState1", "SynchroState2", "NbDecodedFrames1", "NbDecodedFrames2", "NbErrorFrames1", "NbErrorFrames2", "OverflowInBuffer", "OverflowOutBuffer1", "OverflowOutBuffer2", "OverflowOutBuffer3", "OverflowOutBuffer4", "StatusBE1", "StatusBE2", "BE1ErrorMsg", "BE2ErrorMsg", "MSEdB", "CN1DB", "CN2DB", "CNdB", "NConstPointsAvailable", "SomeConstPoints", "ErrorMsg", "CicStatusUpdated", "CurrentStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.FEConfStatusChanged), global::CICD.FEConfStatusChanged.Parser, new[]{ "ReturnCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.allFileProcessed), global::CICD.allFileProcessed.Parser, new[]{ "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.SWFE_state_changed), global::CICD.SWFE_state_changed.Parser, new[]{ "ReturnCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.HWFE_state_changed), global::CICD.HWFE_state_changed.Parser, new[]{ "ReturnCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.getHeader), global::CICD.getHeader.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CICD.log_message), global::CICD.log_message.Parser, new[]{ "Type", "Msg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Modulation {
    [pbr::OriginalName("BPSK")] Bpsk = 0,
    [pbr::OriginalName("QPSK")] Qpsk = 1,
    [pbr::OriginalName("PSK8")] Psk8 = 2,
    [pbr::OriginalName("QAM8")] Qam8 = 3,
    [pbr::OriginalName("QAM16")] Qam16 = 4,
    [pbr::OriginalName("APSK16")] Apsk16 = 5,
    [pbr::OriginalName("APSK32")] Apsk32 = 6,
    [pbr::OriginalName("UNKNOWNMOD")] Unknownmod = 7,
  }

  public enum FEC {
    [pbr::OriginalName("TPC_3_4")] Tpc34 = 0,
    [pbr::OriginalName("TPC_7_8")] Tpc78 = 1,
    [pbr::OriginalName("TPC_0_95")] Tpc095 = 2,
    [pbr::OriginalName("LDPC_2_3")] Ldpc23 = 3,
    [pbr::OriginalName("LDPC_3_4")] Ldpc34 = 4,
    [pbr::OriginalName("VFEC_0_533")] Vfec0533 = 5,
    [pbr::OriginalName("VFEC_0_631")] Vfec0631 = 6,
    [pbr::OriginalName("VFEC_0_706")] Vfec0706 = 7,
    [pbr::OriginalName("VFEC_0_803")] Vfec0803 = 8,
    [pbr::OriginalName("VFEC_0_576")] Vfec0576 = 9,
    [pbr::OriginalName("VFEC_0_642")] Vfec0642 = 10,
    [pbr::OriginalName("VFEC_0_711")] Vfec0711 = 11,
    [pbr::OriginalName("VFEC_0_780")] Vfec0780 = 12,
    [pbr::OriginalName("UNKNOWNFEC")] Unknownfec = 13,
  }

  /// <summary>
  ///*
  /// InputType
  /// </summary>
  public enum InputType {
    [pbr::OriginalName("REAL")] Real = 0,
    [pbr::OriginalName("COMPLEX")] Complex = 1,
  }

  /// <summary>
  ///*
  /// SubType
  /// </summary>
  public enum SubType {
    [pbr::OriginalName("TYPE_UINT16")] TypeUint16 = 0,
    [pbr::OriginalName("TYPE_INT16")] TypeInt16 = 1,
    [pbr::OriginalName("TYPE_UINT32")] TypeUint32 = 2,
    [pbr::OriginalName("TYPE_INT")] TypeInt = 3,
    [pbr::OriginalName("TYPE_FLOAT")] TypeFloat = 4,
    [pbr::OriginalName("TYPE_DOUBLE")] TypeDouble = 5,
  }

  public enum FrontendType {
    [pbr::OriginalName("HW")] Hw = 0,
    [pbr::OriginalName("SW")] Sw = 1,
  }

  public enum SWFE_state {
    [pbr::OriginalName("SWFE_STOPPED")] SwfeStopped = 0,
    [pbr::OriginalName("SWFE_PAUSED")] SwfePaused = 1,
    [pbr::OriginalName("SWFE_RUNNING")] SwfeRunning = 2,
  }

  public enum HWFE_state {
    [pbr::OriginalName("HWFE_STOPPED")] HwfeStopped = 0,
    [pbr::OriginalName("HWFE_RUNNING")] HwfeRunning = 1,
  }

  public enum CICD_FEstate {
    [pbr::OriginalName("FE_STOPPED")] FeStopped = 0,
    [pbr::OriginalName("FE_PAUSED")] FePaused = 1,
    [pbr::OriginalName("FE_RUNNING")] FeRunning = 2,
  }

  /// <summary>
  ///*
  /// \enum SpectreType
  /// - Regular : Pas d'inversion
  /// - Invert1 : I->Q; Q->I
  /// - Invert2 : I->-Q; Q->I
  /// </summary>
  public enum SpectreType {
    [pbr::OriginalName("REGULAR")] Regular = 0,
    [pbr::OriginalName("INVERT1")] Invert1 = 1,
    [pbr::OriginalName("INVERT2")] Invert2 = 2,
  }

  /// <summary>
  ///*
  /// \enum FEC types
  /// Fec
  /// - TPC    : TPC
  /// - LDPC   : LDPC
  /// - VFEC   : VERSA FEC
  /// - Unknown: Unknown
  /// </summary>
  public enum FecType {
    [pbr::OriginalName("TPC")] Tpc = 0,
    [pbr::OriginalName("LDPC")] Ldpc = 1,
    [pbr::OriginalName("VFEC")] Vfec = 2,
    [pbr::OriginalName("UNKNOWNFECTYPE")] Unknownfectype = 3,
  }

  public enum outputType {
    [pbr::OriginalName("toFile")] ToFile = 0,
    [pbr::OriginalName("toUDP")] ToUdp = 1,
  }

  public enum severity {
    [pbr::OriginalName("INFO")] Info = 0,
    [pbr::OriginalName("WARNING")] Warning = 1,
    [pbr::OriginalName("CRITICAL")] Critical = 2,
    [pbr::OriginalName("FATAL")] Fatal = 3,
    [pbr::OriginalName("UNKNOWN")] Unknown = 4,
  }

  public enum OPCODE {
    [pbr::OriginalName("HEADER")] Header = 0,
    [pbr::OriginalName("ACK")] Ack = 1,
    [pbr::OriginalName("NACK")] Nack = 2,
    /// <summary>
    /// Client to Server
    /// </summary>
    [pbr::OriginalName("CONFIGURE_SWFE")] ConfigureSwfe = 3,
    [pbr::OriginalName("CONFIGURE_HWFE")] ConfigureHwfe = 4,
    [pbr::OriginalName("START_FE")] StartFe = 5,
    [pbr::OriginalName("STOP_FE")] StopFe = 6,
    [pbr::OriginalName("STOP")] Stop = 19,
    [pbr::OriginalName("IDENTIFY")] Identify = 7,
    [pbr::OriginalName("IDENTIFY_AND_SEPARATE")] IdentifyAndSeparate = 8,
    [pbr::OriginalName("REQUEST_MONITORING_REPORT")] RequestMonitoringReport = 9,
    /// <summary>
    /// Server to Client
    /// </summary>
    [pbr::OriginalName("FE_CONFSTATUS_CHANGED")] FeConfstatusChanged = 10,
    [pbr::OriginalName("ALLFILEPROCESSED")] Allfileprocessed = 11,
    [pbr::OriginalName("SWFE_STATE_CHANGED")] SwfeStateChanged = 12,
    [pbr::OriginalName("HWFE_STATE_CHANGED")] HwfeStateChanged = 13,
    [pbr::OriginalName("CICD_STATE_CHANGED")] CicdStateChanged = 14,
    [pbr::OriginalName("MONITORING_REPORT")] MonitoringReport = 15,
    [pbr::OriginalName("LOG_MESSAGE")] LogMessage = 16,
    [pbr::OriginalName("IDENTIFICATION_REPORT")] IdentificationReport = 20,
  }

  #endregion

  #region Messages
  /// <summary>
  /// </summary>
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      sequence_ = other.sequence_;
      opcode_ = other.opcode_;
      messageData_ = other.messageData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "opcode" field.</summary>
    public const int OpcodeFieldNumber = 2;
    private global::CICD.OPCODE opcode_ = 0;
    /// <summary>
    /// Opcode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.OPCODE Opcode {
      get { return opcode_; }
      set {
        opcode_ = value;
      }
    }

    /// <summary>Field number for the "message_data" field.</summary>
    public const int MessageDataFieldNumber = 3;
    private pb::ByteString messageData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageData {
      get { return messageData_; }
      set {
        messageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (Opcode != other.Opcode) return false;
      if (MessageData != other.MessageData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (Opcode != 0) hash ^= Opcode.GetHashCode();
      if (MessageData.Length != 0) hash ^= MessageData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sequence);
      }
      if (Opcode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Opcode);
      }
      if (MessageData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (Opcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opcode);
      }
      if (MessageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.Opcode != 0) {
        Opcode = other.Opcode;
      }
      if (other.MessageData.Length != 0) {
        MessageData = other.MessageData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sequence = input.ReadInt32();
            break;
          }
          case 16: {
            opcode_ = (global::CICD.OPCODE) input.ReadEnum();
            break;
          }
          case 26: {
            MessageData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class configure_SWFE : pb::IMessage<configure_SWFE> {
    private static readonly pb::MessageParser<configure_SWFE> _parser = new pb::MessageParser<configure_SWFE>(() => new configure_SWFE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<configure_SWFE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public configure_SWFE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public configure_SWFE(configure_SWFE other) : this() {
      filename_ = other.filename_;
      inputsignaltype_ = other.inputsignaltype_;
      inputsignalsubtypefromfile_ = other.inputsignalsubtypefromfile_;
      feinhz_ = other.feinhz_;
      fchz_ = other.fchz_;
      usefulbwhz_ = other.usefulbwhz_;
      gaindb_ = other.gaindb_;
      wideband_ = other.wideband_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public configure_SWFE Clone() {
      return new configure_SWFE(this);
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 1;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputsignaltype" field.</summary>
    public const int InputsignaltypeFieldNumber = 2;
    private global::CICD.InputType inputsignaltype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.InputType Inputsignaltype {
      get { return inputsignaltype_; }
      set {
        inputsignaltype_ = value;
      }
    }

    /// <summary>Field number for the "inputsignalsubtypefromfile" field.</summary>
    public const int InputsignalsubtypefromfileFieldNumber = 3;
    private global::CICD.SubType inputsignalsubtypefromfile_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.SubType Inputsignalsubtypefromfile {
      get { return inputsignalsubtypefromfile_; }
      set {
        inputsignalsubtypefromfile_ = value;
      }
    }

    /// <summary>Field number for the "feinhz" field.</summary>
    public const int FeinhzFieldNumber = 4;
    private float feinhz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Feinhz {
      get { return feinhz_; }
      set {
        feinhz_ = value;
      }
    }

    /// <summary>Field number for the "fchz" field.</summary>
    public const int FchzFieldNumber = 5;
    private float fchz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fchz {
      get { return fchz_; }
      set {
        fchz_ = value;
      }
    }

    /// <summary>Field number for the "usefulbwhz" field.</summary>
    public const int UsefulbwhzFieldNumber = 6;
    private float usefulbwhz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Usefulbwhz {
      get { return usefulbwhz_; }
      set {
        usefulbwhz_ = value;
      }
    }

    /// <summary>Field number for the "gaindb" field.</summary>
    public const int GaindbFieldNumber = 7;
    private float gaindb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gaindb {
      get { return gaindb_; }
      set {
        gaindb_ = value;
      }
    }

    /// <summary>Field number for the "wideband" field.</summary>
    public const int WidebandFieldNumber = 8;
    private bool wideband_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Wideband {
      get { return wideband_; }
      set {
        wideband_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as configure_SWFE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(configure_SWFE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filename != other.Filename) return false;
      if (Inputsignaltype != other.Inputsignaltype) return false;
      if (Inputsignalsubtypefromfile != other.Inputsignalsubtypefromfile) return false;
      if (Feinhz != other.Feinhz) return false;
      if (Fchz != other.Fchz) return false;
      if (Usefulbwhz != other.Usefulbwhz) return false;
      if (Gaindb != other.Gaindb) return false;
      if (Wideband != other.Wideband) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (Inputsignaltype != 0) hash ^= Inputsignaltype.GetHashCode();
      if (Inputsignalsubtypefromfile != 0) hash ^= Inputsignalsubtypefromfile.GetHashCode();
      if (Feinhz != 0F) hash ^= Feinhz.GetHashCode();
      if (Fchz != 0F) hash ^= Fchz.GetHashCode();
      if (Usefulbwhz != 0F) hash ^= Usefulbwhz.GetHashCode();
      if (Gaindb != 0F) hash ^= Gaindb.GetHashCode();
      if (Wideband != false) hash ^= Wideband.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Filename.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Filename);
      }
      if (Inputsignaltype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Inputsignaltype);
      }
      if (Inputsignalsubtypefromfile != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Inputsignalsubtypefromfile);
      }
      if (Feinhz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Feinhz);
      }
      if (Fchz != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Fchz);
      }
      if (Usefulbwhz != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Usefulbwhz);
      }
      if (Gaindb != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Gaindb);
      }
      if (Wideband != false) {
        output.WriteRawTag(64);
        output.WriteBool(Wideband);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (Inputsignaltype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Inputsignaltype);
      }
      if (Inputsignalsubtypefromfile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Inputsignalsubtypefromfile);
      }
      if (Feinhz != 0F) {
        size += 1 + 4;
      }
      if (Fchz != 0F) {
        size += 1 + 4;
      }
      if (Usefulbwhz != 0F) {
        size += 1 + 4;
      }
      if (Gaindb != 0F) {
        size += 1 + 4;
      }
      if (Wideband != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(configure_SWFE other) {
      if (other == null) {
        return;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.Inputsignaltype != 0) {
        Inputsignaltype = other.Inputsignaltype;
      }
      if (other.Inputsignalsubtypefromfile != 0) {
        Inputsignalsubtypefromfile = other.Inputsignalsubtypefromfile;
      }
      if (other.Feinhz != 0F) {
        Feinhz = other.Feinhz;
      }
      if (other.Fchz != 0F) {
        Fchz = other.Fchz;
      }
      if (other.Usefulbwhz != 0F) {
        Usefulbwhz = other.Usefulbwhz;
      }
      if (other.Gaindb != 0F) {
        Gaindb = other.Gaindb;
      }
      if (other.Wideband != false) {
        Wideband = other.Wideband;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Filename = input.ReadString();
            break;
          }
          case 16: {
            inputsignaltype_ = (global::CICD.InputType) input.ReadEnum();
            break;
          }
          case 24: {
            inputsignalsubtypefromfile_ = (global::CICD.SubType) input.ReadEnum();
            break;
          }
          case 37: {
            Feinhz = input.ReadFloat();
            break;
          }
          case 45: {
            Fchz = input.ReadFloat();
            break;
          }
          case 53: {
            Usefulbwhz = input.ReadFloat();
            break;
          }
          case 61: {
            Gaindb = input.ReadFloat();
            break;
          }
          case 64: {
            Wideband = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class configure_HWFE : pb::IMessage<configure_HWFE> {
    private static readonly pb::MessageParser<configure_HWFE> _parser = new pb::MessageParser<configure_HWFE>(() => new configure_HWFE());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<configure_HWFE> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public configure_HWFE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public configure_HWFE(configure_HWFE other) : this() {
      feinhz_ = other.feinhz_;
      fchz_ = other.fchz_;
      usefulbwhz_ = other.usefulbwhz_;
      gaindb_ = other.gaindb_;
      wideband_ = other.wideband_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public configure_HWFE Clone() {
      return new configure_HWFE(this);
    }

    /// <summary>Field number for the "feinhz" field.</summary>
    public const int FeinhzFieldNumber = 4;
    private float feinhz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Feinhz {
      get { return feinhz_; }
      set {
        feinhz_ = value;
      }
    }

    /// <summary>Field number for the "fchz" field.</summary>
    public const int FchzFieldNumber = 5;
    private float fchz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fchz {
      get { return fchz_; }
      set {
        fchz_ = value;
      }
    }

    /// <summary>Field number for the "usefulbwhz" field.</summary>
    public const int UsefulbwhzFieldNumber = 6;
    private float usefulbwhz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Usefulbwhz {
      get { return usefulbwhz_; }
      set {
        usefulbwhz_ = value;
      }
    }

    /// <summary>Field number for the "gaindb" field.</summary>
    public const int GaindbFieldNumber = 7;
    private float gaindb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gaindb {
      get { return gaindb_; }
      set {
        gaindb_ = value;
      }
    }

    /// <summary>Field number for the "wideband" field.</summary>
    public const int WidebandFieldNumber = 8;
    private bool wideband_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Wideband {
      get { return wideband_; }
      set {
        wideband_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as configure_HWFE);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(configure_HWFE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Feinhz != other.Feinhz) return false;
      if (Fchz != other.Fchz) return false;
      if (Usefulbwhz != other.Usefulbwhz) return false;
      if (Gaindb != other.Gaindb) return false;
      if (Wideband != other.Wideband) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Feinhz != 0F) hash ^= Feinhz.GetHashCode();
      if (Fchz != 0F) hash ^= Fchz.GetHashCode();
      if (Usefulbwhz != 0F) hash ^= Usefulbwhz.GetHashCode();
      if (Gaindb != 0F) hash ^= Gaindb.GetHashCode();
      if (Wideband != false) hash ^= Wideband.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Feinhz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Feinhz);
      }
      if (Fchz != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Fchz);
      }
      if (Usefulbwhz != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Usefulbwhz);
      }
      if (Gaindb != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Gaindb);
      }
      if (Wideband != false) {
        output.WriteRawTag(64);
        output.WriteBool(Wideband);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Feinhz != 0F) {
        size += 1 + 4;
      }
      if (Fchz != 0F) {
        size += 1 + 4;
      }
      if (Usefulbwhz != 0F) {
        size += 1 + 4;
      }
      if (Gaindb != 0F) {
        size += 1 + 4;
      }
      if (Wideband != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(configure_HWFE other) {
      if (other == null) {
        return;
      }
      if (other.Feinhz != 0F) {
        Feinhz = other.Feinhz;
      }
      if (other.Fchz != 0F) {
        Fchz = other.Fchz;
      }
      if (other.Usefulbwhz != 0F) {
        Usefulbwhz = other.Usefulbwhz;
      }
      if (other.Gaindb != 0F) {
        Gaindb = other.Gaindb;
      }
      if (other.Wideband != false) {
        Wideband = other.Wideband;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 37: {
            Feinhz = input.ReadFloat();
            break;
          }
          case 45: {
            Fchz = input.ReadFloat();
            break;
          }
          case 53: {
            Usefulbwhz = input.ReadFloat();
            break;
          }
          case 61: {
            Gaindb = input.ReadFloat();
            break;
          }
          case 64: {
            Wideband = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Identify : pb::IMessage<Identify> {
    private static readonly pb::MessageParser<Identify> _parser = new pb::MessageParser<Identify>(() => new Identify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Identify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify(Identify other) : this() {
      cncarrierdb_ = other.cncarrierdb_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identify Clone() {
      return new Identify(this);
    }

    /// <summary>Field number for the "cncarrierdb" field.</summary>
    public const int CncarrierdbFieldNumber = 1;
    private float cncarrierdb_;
    /// <summary>
    ///estimated composite C/N of the carrier of interest (dB).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cncarrierdb {
      get { return cncarrierdb_; }
      set {
        cncarrierdb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Identify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Identify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cncarrierdb != other.Cncarrierdb) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cncarrierdb != 0F) hash ^= Cncarrierdb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cncarrierdb != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Cncarrierdb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cncarrierdb != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Identify other) {
      if (other == null) {
        return;
      }
      if (other.Cncarrierdb != 0F) {
        Cncarrierdb = other.Cncarrierdb;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Cncarrierdb = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdentifyAndSeparate : pb::IMessage<IdentifyAndSeparate> {
    private static readonly pb::MessageParser<IdentifyAndSeparate> _parser = new pb::MessageParser<IdentifyAndSeparate>(() => new IdentifyAndSeparate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentifyAndSeparate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifyAndSeparate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifyAndSeparate(IdentifyAndSeparate other) : this() {
      cncarrierdb_ = other.cncarrierdb_;
      output_ = other.output_;
      fileName_ = other.fileName_;
      output1Url_ = other.output1Url_;
      output2Url_ = other.output2Url_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifyAndSeparate Clone() {
      return new IdentifyAndSeparate(this);
    }

    /// <summary>Field number for the "cncarrierdb" field.</summary>
    public const int CncarrierdbFieldNumber = 1;
    private float cncarrierdb_;
    /// <summary>
    ///estimated composite C/N of the carrier of interest (dB).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cncarrierdb {
      get { return cncarrierdb_; }
      set {
        cncarrierdb_ = value;
      }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 2;
    private global::CICD.outputType output_ = 0;
    /// <summary>
    /// to files or to udp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.outputType Output {
      get { return output_; }
      set {
        output_ = value;
      }
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 3;
    private string fileName_ = "";
    /// <summary>
    /// The output filename. The format should be file://&lt;full path with filename and extention>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output1Url" field.</summary>
    public const int Output1UrlFieldNumber = 4;
    private string output1Url_ = "";
    /// <summary>
    /// The output url. The format should be udp://&lt;host ip>:port or file://&lt;full path with filename and extention>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output1Url {
      get { return output1Url_; }
      set {
        output1Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output2Url" field.</summary>
    public const int Output2UrlFieldNumber = 5;
    private string output2Url_ = "";
    /// <summary>
    /// see output1Url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output2Url {
      get { return output2Url_; }
      set {
        output2Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentifyAndSeparate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentifyAndSeparate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cncarrierdb != other.Cncarrierdb) return false;
      if (Output != other.Output) return false;
      if (FileName != other.FileName) return false;
      if (Output1Url != other.Output1Url) return false;
      if (Output2Url != other.Output2Url) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cncarrierdb != 0F) hash ^= Cncarrierdb.GetHashCode();
      if (Output != 0) hash ^= Output.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (Output1Url.Length != 0) hash ^= Output1Url.GetHashCode();
      if (Output2Url.Length != 0) hash ^= Output2Url.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cncarrierdb != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Cncarrierdb);
      }
      if (Output != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Output);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FileName);
      }
      if (Output1Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Output1Url);
      }
      if (Output2Url.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Output2Url);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cncarrierdb != 0F) {
        size += 1 + 4;
      }
      if (Output != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Output);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (Output1Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output1Url);
      }
      if (Output2Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output2Url);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentifyAndSeparate other) {
      if (other == null) {
        return;
      }
      if (other.Cncarrierdb != 0F) {
        Cncarrierdb = other.Cncarrierdb;
      }
      if (other.Output != 0) {
        Output = other.Output;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.Output1Url.Length != 0) {
        Output1Url = other.Output1Url;
      }
      if (other.Output2Url.Length != 0) {
        Output2Url = other.Output2Url;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Cncarrierdb = input.ReadFloat();
            break;
          }
          case 16: {
            output_ = (global::CICD.outputType) input.ReadEnum();
            break;
          }
          case 26: {
            FileName = input.ReadString();
            break;
          }
          case 34: {
            Output1Url = input.ReadString();
            break;
          }
          case 42: {
            Output2Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CarrierInfo : pb::IMessage<CarrierInfo> {
    private static readonly pb::MessageParser<CarrierInfo> _parser = new pb::MessageParser<CarrierInfo>(() => new CarrierInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CarrierInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarrierInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarrierInfo(CarrierInfo other) : this() {
      amplitude_ = other.amplitude_;
      freqHz_ = other.freqHz_;
      baudRateBd_ = other.baudRateBd_;
      nbps_ = other.nbps_;
      rc_ = other.rc_;
      modulation_ = other.modulation_;
      fecType_ = other.fecType_;
      fec_ = other.fec_;
      spectrumType_ = other.spectrumType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarrierInfo Clone() {
      return new CarrierInfo(this);
    }

    /// <summary>Field number for the "amplitude" field.</summary>
    public const int AmplitudeFieldNumber = 1;
    private float amplitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amplitude {
      get { return amplitude_; }
      set {
        amplitude_ = value;
      }
    }

    /// <summary>Field number for the "freqHz" field.</summary>
    public const int FreqHzFieldNumber = 2;
    private float freqHz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FreqHz {
      get { return freqHz_; }
      set {
        freqHz_ = value;
      }
    }

    /// <summary>Field number for the "baudRateBd" field.</summary>
    public const int BaudRateBdFieldNumber = 3;
    private float baudRateBd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaudRateBd {
      get { return baudRateBd_; }
      set {
        baudRateBd_ = value;
      }
    }

    /// <summary>Field number for the "nbps" field.</summary>
    public const int NbpsFieldNumber = 4;
    private int nbps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nbps {
      get { return nbps_; }
      set {
        nbps_ = value;
      }
    }

    /// <summary>Field number for the "Rc" field.</summary>
    public const int RcFieldNumber = 5;
    private float rc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rc {
      get { return rc_; }
      set {
        rc_ = value;
      }
    }

    /// <summary>Field number for the "modulation" field.</summary>
    public const int ModulationFieldNumber = 6;
    private global::CICD.Modulation modulation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.Modulation Modulation {
      get { return modulation_; }
      set {
        modulation_ = value;
      }
    }

    /// <summary>Field number for the "fecType" field.</summary>
    public const int FecTypeFieldNumber = 7;
    private global::CICD.FecType fecType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.FecType FecType {
      get { return fecType_; }
      set {
        fecType_ = value;
      }
    }

    /// <summary>Field number for the "Fec" field.</summary>
    public const int FecFieldNumber = 8;
    private global::CICD.FEC fec_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.FEC Fec {
      get { return fec_; }
      set {
        fec_ = value;
      }
    }

    /// <summary>Field number for the "spectrumType" field.</summary>
    public const int SpectrumTypeFieldNumber = 9;
    private global::CICD.SpectreType spectrumType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.SpectreType SpectrumType {
      get { return spectrumType_; }
      set {
        spectrumType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CarrierInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CarrierInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amplitude != other.Amplitude) return false;
      if (FreqHz != other.FreqHz) return false;
      if (BaudRateBd != other.BaudRateBd) return false;
      if (Nbps != other.Nbps) return false;
      if (Rc != other.Rc) return false;
      if (Modulation != other.Modulation) return false;
      if (FecType != other.FecType) return false;
      if (Fec != other.Fec) return false;
      if (SpectrumType != other.SpectrumType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amplitude != 0F) hash ^= Amplitude.GetHashCode();
      if (FreqHz != 0F) hash ^= FreqHz.GetHashCode();
      if (BaudRateBd != 0F) hash ^= BaudRateBd.GetHashCode();
      if (Nbps != 0) hash ^= Nbps.GetHashCode();
      if (Rc != 0F) hash ^= Rc.GetHashCode();
      if (Modulation != 0) hash ^= Modulation.GetHashCode();
      if (FecType != 0) hash ^= FecType.GetHashCode();
      if (Fec != 0) hash ^= Fec.GetHashCode();
      if (SpectrumType != 0) hash ^= SpectrumType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amplitude != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Amplitude);
      }
      if (FreqHz != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(FreqHz);
      }
      if (BaudRateBd != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BaudRateBd);
      }
      if (Nbps != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Nbps);
      }
      if (Rc != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Rc);
      }
      if (Modulation != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Modulation);
      }
      if (FecType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) FecType);
      }
      if (Fec != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Fec);
      }
      if (SpectrumType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) SpectrumType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amplitude != 0F) {
        size += 1 + 4;
      }
      if (FreqHz != 0F) {
        size += 1 + 4;
      }
      if (BaudRateBd != 0F) {
        size += 1 + 4;
      }
      if (Nbps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nbps);
      }
      if (Rc != 0F) {
        size += 1 + 4;
      }
      if (Modulation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Modulation);
      }
      if (FecType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FecType);
      }
      if (Fec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fec);
      }
      if (SpectrumType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpectrumType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CarrierInfo other) {
      if (other == null) {
        return;
      }
      if (other.Amplitude != 0F) {
        Amplitude = other.Amplitude;
      }
      if (other.FreqHz != 0F) {
        FreqHz = other.FreqHz;
      }
      if (other.BaudRateBd != 0F) {
        BaudRateBd = other.BaudRateBd;
      }
      if (other.Nbps != 0) {
        Nbps = other.Nbps;
      }
      if (other.Rc != 0F) {
        Rc = other.Rc;
      }
      if (other.Modulation != 0) {
        Modulation = other.Modulation;
      }
      if (other.FecType != 0) {
        FecType = other.FecType;
      }
      if (other.Fec != 0) {
        Fec = other.Fec;
      }
      if (other.SpectrumType != 0) {
        SpectrumType = other.SpectrumType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Amplitude = input.ReadFloat();
            break;
          }
          case 21: {
            FreqHz = input.ReadFloat();
            break;
          }
          case 29: {
            BaudRateBd = input.ReadFloat();
            break;
          }
          case 32: {
            Nbps = input.ReadInt32();
            break;
          }
          case 45: {
            Rc = input.ReadFloat();
            break;
          }
          case 48: {
            modulation_ = (global::CICD.Modulation) input.ReadEnum();
            break;
          }
          case 56: {
            fecType_ = (global::CICD.FecType) input.ReadEnum();
            break;
          }
          case 64: {
            fec_ = (global::CICD.FEC) input.ReadEnum();
            break;
          }
          case 72: {
            spectrumType_ = (global::CICD.SpectreType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CicStatus : pb::IMessage<CicStatus> {
    private static readonly pb::MessageParser<CicStatus> _parser = new pb::MessageParser<CicStatus>(() => new CicStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CicStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CicStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CicStatus(CicStatus other) : this() {
      cicPresent_ = other.cicPresent_;
      errNb_ = other.errNb_;
      fcHz_ = other.fcHz_;
      compositeSnrDB_ = other.compositeSnrDB_;
      Carrier1 = other.carrier1_ != null ? other.Carrier1.Clone() : null;
      Carrier2 = other.carrier2_ != null ? other.Carrier2.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CicStatus Clone() {
      return new CicStatus(this);
    }

    /// <summary>Field number for the "cicPresent" field.</summary>
    public const int CicPresentFieldNumber = 2;
    private bool cicPresent_;
    /// <summary>
    /// brief cicPresent : presence (true) or absence of CIC (false)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CicPresent {
      get { return cicPresent_; }
      set {
        cicPresent_ = value;
      }
    }

    /// <summary>Field number for the "errNb" field.</summary>
    public const int ErrNbFieldNumber = 3;
    private int errNb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrNb {
      get { return errNb_; }
      set {
        errNb_ = value;
      }
    }

    /// <summary>Field number for the "fcHz" field.</summary>
    public const int FcHzFieldNumber = 4;
    private float fcHz_;
    /// <summary>
    /// Cetral frequency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FcHz {
      get { return fcHz_; }
      set {
        fcHz_ = value;
      }
    }

    /// <summary>Field number for the "compositeSnrDB" field.</summary>
    public const int CompositeSnrDBFieldNumber = 5;
    private float compositeSnrDB_;
    /// <summary>
    ///composite signal to noise ratio of composite signal in dB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CompositeSnrDB {
      get { return compositeSnrDB_; }
      set {
        compositeSnrDB_ = value;
      }
    }

    /// <summary>Field number for the "carrier1" field.</summary>
    public const int Carrier1FieldNumber = 6;
    private global::CICD.CarrierInfo carrier1_;
    /// <summary>
    ///Info of stronger component signal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.CarrierInfo Carrier1 {
      get { return carrier1_; }
      set {
        carrier1_ = value;
      }
    }

    /// <summary>Field number for the "carrier2" field.</summary>
    public const int Carrier2FieldNumber = 7;
    private global::CICD.CarrierInfo carrier2_;
    /// <summary>
    ///Info of waker component signal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.CarrierInfo Carrier2 {
      get { return carrier2_; }
      set {
        carrier2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CicStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CicStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CicPresent != other.CicPresent) return false;
      if (ErrNb != other.ErrNb) return false;
      if (FcHz != other.FcHz) return false;
      if (CompositeSnrDB != other.CompositeSnrDB) return false;
      if (!object.Equals(Carrier1, other.Carrier1)) return false;
      if (!object.Equals(Carrier2, other.Carrier2)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CicPresent != false) hash ^= CicPresent.GetHashCode();
      if (ErrNb != 0) hash ^= ErrNb.GetHashCode();
      if (FcHz != 0F) hash ^= FcHz.GetHashCode();
      if (CompositeSnrDB != 0F) hash ^= CompositeSnrDB.GetHashCode();
      if (carrier1_ != null) hash ^= Carrier1.GetHashCode();
      if (carrier2_ != null) hash ^= Carrier2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CicPresent != false) {
        output.WriteRawTag(16);
        output.WriteBool(CicPresent);
      }
      if (ErrNb != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ErrNb);
      }
      if (FcHz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(FcHz);
      }
      if (CompositeSnrDB != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CompositeSnrDB);
      }
      if (carrier1_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Carrier1);
      }
      if (carrier2_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Carrier2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CicPresent != false) {
        size += 1 + 1;
      }
      if (ErrNb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrNb);
      }
      if (FcHz != 0F) {
        size += 1 + 4;
      }
      if (CompositeSnrDB != 0F) {
        size += 1 + 4;
      }
      if (carrier1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Carrier1);
      }
      if (carrier2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Carrier2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CicStatus other) {
      if (other == null) {
        return;
      }
      if (other.CicPresent != false) {
        CicPresent = other.CicPresent;
      }
      if (other.ErrNb != 0) {
        ErrNb = other.ErrNb;
      }
      if (other.FcHz != 0F) {
        FcHz = other.FcHz;
      }
      if (other.CompositeSnrDB != 0F) {
        CompositeSnrDB = other.CompositeSnrDB;
      }
      if (other.carrier1_ != null) {
        if (carrier1_ == null) {
          carrier1_ = new global::CICD.CarrierInfo();
        }
        Carrier1.MergeFrom(other.Carrier1);
      }
      if (other.carrier2_ != null) {
        if (carrier2_ == null) {
          carrier2_ = new global::CICD.CarrierInfo();
        }
        Carrier2.MergeFrom(other.Carrier2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            CicPresent = input.ReadBool();
            break;
          }
          case 24: {
            ErrNb = input.ReadInt32();
            break;
          }
          case 37: {
            FcHz = input.ReadFloat();
            break;
          }
          case 45: {
            CompositeSnrDB = input.ReadFloat();
            break;
          }
          case 50: {
            if (carrier1_ == null) {
              carrier1_ = new global::CICD.CarrierInfo();
            }
            input.ReadMessage(carrier1_);
            break;
          }
          case 58: {
            if (carrier2_ == null) {
              carrier2_ = new global::CICD.CarrierInfo();
            }
            input.ReadMessage(carrier2_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonitoringReport : pb::IMessage<MonitoringReport> {
    private static readonly pb::MessageParser<MonitoringReport> _parser = new pb::MessageParser<MonitoringReport>(() => new MonitoringReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonitoringReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringReport(MonitoringReport other) : this() {
      outputRMS_ = other.outputRMS_;
      peakValue_ = other.peakValue_;
      nBitsMag_ = other.nBitsMag_;
      max_ = other.max_;
      thresh_ = other.thresh_;
      nTot_ = other.nTot_;
      nAboveThresh_ = other.nAboveThresh_;
      fEstatus_ = other.fEstatus_;
      fEErrorMsg_ = other.fEErrorMsg_;
      tempHWFE_ = other.tempHWFE_;
      majorMainFPGA_ = other.majorMainFPGA_;
      minorMainFPGA_ = other.minorMainFPGA_;
      uMajorCopro_ = other.uMajorCopro_;
      uMinorCopro_ = other.uMinorCopro_;
      uVariantCopro_ = other.uVariantCopro_;
      hWFESWVersion_ = other.hWFESWVersion_;
      tempBoad1_ = other.tempBoad1_;
      tempBoad2_ = other.tempBoad2_;
      versionFWBoard1_ = other.versionFWBoard1_;
      versionFWBoard2_ = other.versionFWBoard2_;
      versionSWBoard1_ = other.versionSWBoard1_;
      versionSWBoard2_ = other.versionSWBoard2_;
      majorSW_ = other.majorSW_;
      minorSW_ = other.minorSW_;
      separationState_ = other.separationState_;
      nbSymbSeparated_ = other.nbSymbSeparated_;
      nbDataInBuffer_ = other.nbDataInBuffer_;
      nbDataOutBuffer1_ = other.nbDataOutBuffer1_;
      nbDataOutBuffer2_ = other.nbDataOutBuffer2_;
      nbDataOutBuffer3_ = other.nbDataOutBuffer3_;
      nbDataOutBuffer4_ = other.nbDataOutBuffer4_;
      synchroState1_ = other.synchroState1_;
      synchroState2_ = other.synchroState2_;
      nbDecodedFrames1_ = other.nbDecodedFrames1_;
      nbDecodedFrames2_ = other.nbDecodedFrames2_;
      nbErrorFrames1_ = other.nbErrorFrames1_;
      nbErrorFrames2_ = other.nbErrorFrames2_;
      overflowInBuffer_ = other.overflowInBuffer_;
      overflowOutBuffer1_ = other.overflowOutBuffer1_;
      overflowOutBuffer2_ = other.overflowOutBuffer2_;
      overflowOutBuffer3_ = other.overflowOutBuffer3_;
      overflowOutBuffer4_ = other.overflowOutBuffer4_;
      statusBE1_ = other.statusBE1_;
      statusBE2_ = other.statusBE2_;
      bE1ErrorMsg_ = other.bE1ErrorMsg_;
      bE2ErrorMsg_ = other.bE2ErrorMsg_;
      mSEdB_ = other.mSEdB_;
      cN1DB_ = other.cN1DB_;
      cN2DB_ = other.cN2DB_;
      cNdB_ = other.cNdB_;
      nConstPointsAvailable_ = other.nConstPointsAvailable_;
      someConstPoints_ = other.someConstPoints_.Clone();
      errorMsg_ = other.errorMsg_;
      cicStatusUpdated_ = other.cicStatusUpdated_;
      CurrentStatus = other.currentStatus_ != null ? other.CurrentStatus.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonitoringReport Clone() {
      return new MonitoringReport(this);
    }

    /// <summary>Field number for the "outputRMS" field.</summary>
    public const int OutputRMSFieldNumber = 1;
    private double outputRMS_;
    /// <summary>
    /// all in linear scale (dB only in display)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OutputRMS {
      get { return outputRMS_; }
      set {
        outputRMS_ = value;
      }
    }

    /// <summary>Field number for the "peakValue" field.</summary>
    public const int PeakValueFieldNumber = 2;
    private double peakValue_;
    /// <summary>
    /// peak value of signal at the output of frontend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PeakValue {
      get { return peakValue_; }
      set {
        peakValue_ = value;
      }
    }

    /// <summary>Field number for the "nBitsMag" field.</summary>
    public const int NBitsMagFieldNumber = 3;
    private uint nBitsMag_;
    /// <summary>
    /// number of effective bits at the output of frontend   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NBitsMag {
      get { return nBitsMag_; }
      set {
        nBitsMag_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 4;
    private double max_;
    /// <summary>
    /// max magnitude of signal at the output of frontend   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "thresh" field.</summary>
    public const int ThreshFieldNumber = 5;
    private double thresh_;
    /// <summary>
    /// magnitude threshold to measure number of samples with magnitude above threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Thresh {
      get { return thresh_; }
      set {
        thresh_ = value;
      }
    }

    /// <summary>Field number for the "nTot" field.</summary>
    public const int NTotFieldNumber = 6;
    private ulong nTot_;
    /// <summary>
    /// at the output of frontend   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NTot {
      get { return nTot_; }
      set {
        nTot_ = value;
      }
    }

    /// <summary>Field number for the "nAboveThresh" field.</summary>
    public const int NAboveThreshFieldNumber = 7;
    private ulong nAboveThresh_;
    /// <summary>
    /// total number of samples at the output of frontend above threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NAboveThresh {
      get { return nAboveThresh_; }
      set {
        nAboveThresh_ = value;
      }
    }

    /// <summary>Field number for the "FEstatus" field.</summary>
    public const int FEstatusFieldNumber = 8;
    private bool fEstatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FEstatus {
      get { return fEstatus_; }
      set {
        fEstatus_ = value;
      }
    }

    /// <summary>Field number for the "FEErrorMsg" field.</summary>
    public const int FEErrorMsgFieldNumber = 9;
    private string fEErrorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FEErrorMsg {
      get { return fEErrorMsg_; }
      set {
        fEErrorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tempHWFE" field.</summary>
    public const int TempHWFEFieldNumber = 10;
    private int tempHWFE_;
    /// <summary>
    /// temperature of HWFE FPGA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TempHWFE {
      get { return tempHWFE_; }
      set {
        tempHWFE_ = value;
      }
    }

    /// <summary>Field number for the "majorMainFPGA" field.</summary>
    public const int MajorMainFPGAFieldNumber = 11;
    private uint majorMainFPGA_;
    /// <summary>
    /// versions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MajorMainFPGA {
      get { return majorMainFPGA_; }
      set {
        majorMainFPGA_ = value;
      }
    }

    /// <summary>Field number for the "minorMainFPGA" field.</summary>
    public const int MinorMainFPGAFieldNumber = 12;
    private uint minorMainFPGA_;
    /// <summary>
    /// HWFE main FPGA: FW minor version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinorMainFPGA {
      get { return minorMainFPGA_; }
      set {
        minorMainFPGA_ = value;
      }
    }

    /// <summary>Field number for the "uMajorCopro" field.</summary>
    public const int UMajorCoproFieldNumber = 13;
    private uint uMajorCopro_;
    /// <summary>
    /// HWFE coprocessor FPGA: FW major version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UMajorCopro {
      get { return uMajorCopro_; }
      set {
        uMajorCopro_ = value;
      }
    }

    /// <summary>Field number for the "uMinorCopro" field.</summary>
    public const int UMinorCoproFieldNumber = 14;
    private uint uMinorCopro_;
    /// <summary>
    /// HWFE coprocessor FPGA: FW minor version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UMinorCopro {
      get { return uMinorCopro_; }
      set {
        uMinorCopro_ = value;
      }
    }

    /// <summary>Field number for the "uVariantCopro" field.</summary>
    public const int UVariantCoproFieldNumber = 15;
    private uint uVariantCopro_;
    /// <summary>
    /// HWFE coprocessor FPGA: FW revision number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UVariantCopro {
      get { return uVariantCopro_; }
      set {
        uVariantCopro_ = value;
      }
    }

    /// <summary>Field number for the "HWFESWVersion" field.</summary>
    public const int HWFESWVersionFieldNumber = 16;
    private string hWFESWVersion_ = "";
    /// <summary>
    /// HWFE SW version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HWFESWVersion {
      get { return hWFESWVersion_; }
      set {
        hWFESWVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tempBoad1" field.</summary>
    public const int TempBoad1FieldNumber = 20;
    private int tempBoad1_;
    /// <summary>
    /// Separator boards Status:
    ///---------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TempBoad1 {
      get { return tempBoad1_; }
      set {
        tempBoad1_ = value;
      }
    }

    /// <summary>Field number for the "tempBoad2" field.</summary>
    public const int TempBoad2FieldNumber = 21;
    private int tempBoad2_;
    /// <summary>
    /// temperature of separator board2 FPGA    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TempBoad2 {
      get { return tempBoad2_; }
      set {
        tempBoad2_ = value;
      }
    }

    /// <summary>Field number for the "versionFWBoard1" field.</summary>
    public const int VersionFWBoard1FieldNumber = 22;
    private string versionFWBoard1_ = "";
    /// <summary>
    /// FW version of separator board1 FPGA, 3 values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionFWBoard1 {
      get { return versionFWBoard1_; }
      set {
        versionFWBoard1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionFWBoard2" field.</summary>
    public const int VersionFWBoard2FieldNumber = 23;
    private string versionFWBoard2_ = "";
    /// <summary>
    /// FW version of separator board2 FPGA, 3 values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionFWBoard2 {
      get { return versionFWBoard2_; }
      set {
        versionFWBoard2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionSWBoard1" field.</summary>
    public const int VersionSWBoard1FieldNumber = 24;
    private string versionSWBoard1_ = "";
    /// <summary>
    /// SW (driver) version of separator board1, 3 values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionSWBoard1 {
      get { return versionSWBoard1_; }
      set {
        versionSWBoard1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versionSWBoard2" field.</summary>
    public const int VersionSWBoard2FieldNumber = 25;
    private string versionSWBoard2_ = "";
    /// <summary>
    /// SW (driver) version of separator board2, 3 values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionSWBoard2 {
      get { return versionSWBoard2_; }
      set {
        versionSWBoard2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "majorSW" field.</summary>
    public const int MajorSWFieldNumber = 26;
    private uint majorSW_;
    /// <summary>
    /// SW major version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MajorSW {
      get { return majorSW_; }
      set {
        majorSW_ = value;
      }
    }

    /// <summary>Field number for the "minorSW" field.</summary>
    public const int MinorSWFieldNumber = 27;
    private uint minorSW_;
    /// <summary>
    /// SW minor version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinorSW {
      get { return minorSW_; }
      set {
        minorSW_ = value;
      }
    }

    /// <summary>Field number for the "separationState" field.</summary>
    public const int SeparationStateFieldNumber = 40;
    private bool separationState_;
    /// <summary>
    /// CICD Status:
    ///---------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SeparationState {
      get { return separationState_; }
      set {
        separationState_ = value;
      }
    }

    /// <summary>Field number for the "nbSymbSeparated" field.</summary>
    public const int NbSymbSeparatedFieldNumber = 41;
    private ulong nbSymbSeparated_;
    /// <summary>
    /// total number of separated symbols
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbSymbSeparated {
      get { return nbSymbSeparated_; }
      set {
        nbSymbSeparated_ = value;
      }
    }

    /// <summary>Field number for the "nbDataInBuffer" field.</summary>
    public const int NbDataInBufferFieldNumber = 42;
    private ulong nbDataInBuffer_;
    /// <summary>
    /// number of data in input buffer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbDataInBuffer {
      get { return nbDataInBuffer_; }
      set {
        nbDataInBuffer_ = value;
      }
    }

    /// <summary>Field number for the "nbDataOutBuffer1" field.</summary>
    public const int NbDataOutBuffer1FieldNumber = 43;
    private ulong nbDataOutBuffer1_;
    /// <summary>
    /// number of data in ouput buffer 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbDataOutBuffer1 {
      get { return nbDataOutBuffer1_; }
      set {
        nbDataOutBuffer1_ = value;
      }
    }

    /// <summary>Field number for the "nbDataOutBuffer2" field.</summary>
    public const int NbDataOutBuffer2FieldNumber = 44;
    private ulong nbDataOutBuffer2_;
    /// <summary>
    /// number of data in ouput buffer 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbDataOutBuffer2 {
      get { return nbDataOutBuffer2_; }
      set {
        nbDataOutBuffer2_ = value;
      }
    }

    /// <summary>Field number for the "nbDataOutBuffer3" field.</summary>
    public const int NbDataOutBuffer3FieldNumber = 45;
    private ulong nbDataOutBuffer3_;
    /// <summary>
    /// number of data in ouput buffer 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbDataOutBuffer3 {
      get { return nbDataOutBuffer3_; }
      set {
        nbDataOutBuffer3_ = value;
      }
    }

    /// <summary>Field number for the "nbDataOutBuffer4" field.</summary>
    public const int NbDataOutBuffer4FieldNumber = 46;
    private ulong nbDataOutBuffer4_;
    /// <summary>
    /// number of data in ouput buffer 4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbDataOutBuffer4 {
      get { return nbDataOutBuffer4_; }
      set {
        nbDataOutBuffer4_ = value;
      }
    }

    /// <summary>Field number for the "synchroState1" field.</summary>
    public const int SynchroState1FieldNumber = 47;
    private bool synchroState1_;
    /// <summary>
    /// true: FEC decoder of channel 1 locked
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SynchroState1 {
      get { return synchroState1_; }
      set {
        synchroState1_ = value;
      }
    }

    /// <summary>Field number for the "synchroState2" field.</summary>
    public const int SynchroState2FieldNumber = 48;
    private bool synchroState2_;
    /// <summary>
    /// true: FEC decoder of channel 2 locked
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SynchroState2 {
      get { return synchroState2_; }
      set {
        synchroState2_ = value;
      }
    }

    /// <summary>Field number for the "nbDecodedFrames1" field.</summary>
    public const int NbDecodedFrames1FieldNumber = 49;
    private ulong nbDecodedFrames1_;
    /// <summary>
    /// number of decoded FEC frames of channel 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbDecodedFrames1 {
      get { return nbDecodedFrames1_; }
      set {
        nbDecodedFrames1_ = value;
      }
    }

    /// <summary>Field number for the "nbDecodedFrames2" field.</summary>
    public const int NbDecodedFrames2FieldNumber = 50;
    private ulong nbDecodedFrames2_;
    /// <summary>
    /// number of decoded FEC frames of channel 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbDecodedFrames2 {
      get { return nbDecodedFrames2_; }
      set {
        nbDecodedFrames2_ = value;
      }
    }

    /// <summary>Field number for the "nbErrorFrames1" field.</summary>
    public const int NbErrorFrames1FieldNumber = 51;
    private ulong nbErrorFrames1_;
    /// <summary>
    /// number of erroneous FEC frames of channel 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbErrorFrames1 {
      get { return nbErrorFrames1_; }
      set {
        nbErrorFrames1_ = value;
      }
    }

    /// <summary>Field number for the "nbErrorFrames2" field.</summary>
    public const int NbErrorFrames2FieldNumber = 52;
    private ulong nbErrorFrames2_;
    /// <summary>
    /// number of erroneous FEC frames of channel 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NbErrorFrames2 {
      get { return nbErrorFrames2_; }
      set {
        nbErrorFrames2_ = value;
      }
    }

    /// <summary>Field number for the "overflowInBuffer" field.</summary>
    public const int OverflowInBufferFieldNumber = 53;
    private bool overflowInBuffer_;
    /// <summary>
    /// true: overflow of Rx buffer: input rate to processing boards must be reduced
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverflowInBuffer {
      get { return overflowInBuffer_; }
      set {
        overflowInBuffer_ = value;
      }
    }

    /// <summary>Field number for the "overflowOutBuffer1" field.</summary>
    public const int OverflowOutBuffer1FieldNumber = 54;
    private bool overflowOutBuffer1_;
    /// <summary>
    /// true: overflow of ouput buffer 1: output reading rate must be increased
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverflowOutBuffer1 {
      get { return overflowOutBuffer1_; }
      set {
        overflowOutBuffer1_ = value;
      }
    }

    /// <summary>Field number for the "overflowOutBuffer2" field.</summary>
    public const int OverflowOutBuffer2FieldNumber = 55;
    private bool overflowOutBuffer2_;
    /// <summary>
    /// true: overflow of ouput buffer 2: output reading rate must be increased
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverflowOutBuffer2 {
      get { return overflowOutBuffer2_; }
      set {
        overflowOutBuffer2_ = value;
      }
    }

    /// <summary>Field number for the "overflowOutBuffer3" field.</summary>
    public const int OverflowOutBuffer3FieldNumber = 56;
    private bool overflowOutBuffer3_;
    /// <summary>
    /// true: overflow of ouput buffer 3: output reading rate must be increased
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverflowOutBuffer3 {
      get { return overflowOutBuffer3_; }
      set {
        overflowOutBuffer3_ = value;
      }
    }

    /// <summary>Field number for the "overflowOutBuffer4" field.</summary>
    public const int OverflowOutBuffer4FieldNumber = 57;
    private bool overflowOutBuffer4_;
    /// <summary>
    /// true: overflow of ouput buffer 4: output reading rate must be increased
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OverflowOutBuffer4 {
      get { return overflowOutBuffer4_; }
      set {
        overflowOutBuffer4_ = value;
      }
    }

    /// <summary>Field number for the "statusBE1" field.</summary>
    public const int StatusBE1FieldNumber = 58;
    private bool statusBE1_;
    /// <summary>
    /// true: backend of channel 1 started
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StatusBE1 {
      get { return statusBE1_; }
      set {
        statusBE1_ = value;
      }
    }

    /// <summary>Field number for the "statusBE2" field.</summary>
    public const int StatusBE2FieldNumber = 59;
    private bool statusBE2_;
    /// <summary>
    /// true: backend of channel 2 started
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StatusBE2 {
      get { return statusBE2_; }
      set {
        statusBE2_ = value;
      }
    }

    /// <summary>Field number for the "BE1ErrorMsg" field.</summary>
    public const int BE1ErrorMsgFieldNumber = 60;
    private string bE1ErrorMsg_ = "";
    /// <summary>
    /// backend 1 error message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BE1ErrorMsg {
      get { return bE1ErrorMsg_; }
      set {
        bE1ErrorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BE2ErrorMsg" field.</summary>
    public const int BE2ErrorMsgFieldNumber = 61;
    private string bE2ErrorMsg_ = "";
    /// <summary>
    /// backend 2 error message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BE2ErrorMsg {
      get { return bE2ErrorMsg_; }
      set {
        bE2ErrorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MSEdB" field.</summary>
    public const int MSEdBFieldNumber = 70;
    private float mSEdB_;
    /// <summary>
    /// mean square error on channel 2 after turbo cancellation      
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MSEdB {
      get { return mSEdB_; }
      set {
        mSEdB_ = value;
      }
    }

    /// <summary>Field number for the "CN1dB" field.</summary>
    public const int CN1DBFieldNumber = 71;
    private float cN1DB_;
    /// <summary>
    /// C/N of channel 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CN1DB {
      get { return cN1DB_; }
      set {
        cN1DB_ = value;
      }
    }

    /// <summary>Field number for the "CN2dB" field.</summary>
    public const int CN2DBFieldNumber = 72;
    private float cN2DB_;
    /// <summary>
    /// C/N of channel 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CN2DB {
      get { return cN2DB_; }
      set {
        cN2DB_ = value;
      }
    }

    /// <summary>Field number for the "CNdB" field.</summary>
    public const int CNdBFieldNumber = 73;
    private float cNdB_;
    /// <summary>
    /// C/N of composite signal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CNdB {
      get { return cNdB_; }
      set {
        cNdB_ = value;
      }
    }

    /// <summary>Field number for the "nConstPointsAvailable" field.</summary>
    public const int NConstPointsAvailableFieldNumber = 74;
    private uint nConstPointsAvailable_;
    /// <summary>
    /// for constellation display after turbo cancellation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NConstPointsAvailable {
      get { return nConstPointsAvailable_; }
      set {
        nConstPointsAvailable_ = value;
      }
    }

    /// <summary>Field number for the "someConstPoints" field.</summary>
    public const int SomeConstPointsFieldNumber = 75;
    private static readonly pb::FieldCodec<float> _repeated_someConstPoints_codec
        = pb::FieldCodec.ForFloat(602);
    private readonly pbc::RepeatedField<float> someConstPoints_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// of channel 2 after turbo cancellation (in complex samples, &lt;= 1000)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SomeConstPoints {
      get { return someConstPoints_; }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 76;
    private string errorMsg_ = "";
    /// <summary>
    /// error message, empty if no error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cicStatusUpdated" field.</summary>
    public const int CicStatusUpdatedFieldNumber = 77;
    private bool cicStatusUpdated_;
    /// <summary>
    /// true if CicStatus has been updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CicStatusUpdated {
      get { return cicStatusUpdated_; }
      set {
        cicStatusUpdated_ = value;
      }
    }

    /// <summary>Field number for the "currentStatus" field.</summary>
    public const int CurrentStatusFieldNumber = 78;
    private global::CICD.CicStatus currentStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.CicStatus CurrentStatus {
      get { return currentStatus_; }
      set {
        currentStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonitoringReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonitoringReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputRMS != other.OutputRMS) return false;
      if (PeakValue != other.PeakValue) return false;
      if (NBitsMag != other.NBitsMag) return false;
      if (Max != other.Max) return false;
      if (Thresh != other.Thresh) return false;
      if (NTot != other.NTot) return false;
      if (NAboveThresh != other.NAboveThresh) return false;
      if (FEstatus != other.FEstatus) return false;
      if (FEErrorMsg != other.FEErrorMsg) return false;
      if (TempHWFE != other.TempHWFE) return false;
      if (MajorMainFPGA != other.MajorMainFPGA) return false;
      if (MinorMainFPGA != other.MinorMainFPGA) return false;
      if (UMajorCopro != other.UMajorCopro) return false;
      if (UMinorCopro != other.UMinorCopro) return false;
      if (UVariantCopro != other.UVariantCopro) return false;
      if (HWFESWVersion != other.HWFESWVersion) return false;
      if (TempBoad1 != other.TempBoad1) return false;
      if (TempBoad2 != other.TempBoad2) return false;
      if (VersionFWBoard1 != other.VersionFWBoard1) return false;
      if (VersionFWBoard2 != other.VersionFWBoard2) return false;
      if (VersionSWBoard1 != other.VersionSWBoard1) return false;
      if (VersionSWBoard2 != other.VersionSWBoard2) return false;
      if (MajorSW != other.MajorSW) return false;
      if (MinorSW != other.MinorSW) return false;
      if (SeparationState != other.SeparationState) return false;
      if (NbSymbSeparated != other.NbSymbSeparated) return false;
      if (NbDataInBuffer != other.NbDataInBuffer) return false;
      if (NbDataOutBuffer1 != other.NbDataOutBuffer1) return false;
      if (NbDataOutBuffer2 != other.NbDataOutBuffer2) return false;
      if (NbDataOutBuffer3 != other.NbDataOutBuffer3) return false;
      if (NbDataOutBuffer4 != other.NbDataOutBuffer4) return false;
      if (SynchroState1 != other.SynchroState1) return false;
      if (SynchroState2 != other.SynchroState2) return false;
      if (NbDecodedFrames1 != other.NbDecodedFrames1) return false;
      if (NbDecodedFrames2 != other.NbDecodedFrames2) return false;
      if (NbErrorFrames1 != other.NbErrorFrames1) return false;
      if (NbErrorFrames2 != other.NbErrorFrames2) return false;
      if (OverflowInBuffer != other.OverflowInBuffer) return false;
      if (OverflowOutBuffer1 != other.OverflowOutBuffer1) return false;
      if (OverflowOutBuffer2 != other.OverflowOutBuffer2) return false;
      if (OverflowOutBuffer3 != other.OverflowOutBuffer3) return false;
      if (OverflowOutBuffer4 != other.OverflowOutBuffer4) return false;
      if (StatusBE1 != other.StatusBE1) return false;
      if (StatusBE2 != other.StatusBE2) return false;
      if (BE1ErrorMsg != other.BE1ErrorMsg) return false;
      if (BE2ErrorMsg != other.BE2ErrorMsg) return false;
      if (MSEdB != other.MSEdB) return false;
      if (CN1DB != other.CN1DB) return false;
      if (CN2DB != other.CN2DB) return false;
      if (CNdB != other.CNdB) return false;
      if (NConstPointsAvailable != other.NConstPointsAvailable) return false;
      if(!someConstPoints_.Equals(other.someConstPoints_)) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      if (CicStatusUpdated != other.CicStatusUpdated) return false;
      if (!object.Equals(CurrentStatus, other.CurrentStatus)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutputRMS != 0D) hash ^= OutputRMS.GetHashCode();
      if (PeakValue != 0D) hash ^= PeakValue.GetHashCode();
      if (NBitsMag != 0) hash ^= NBitsMag.GetHashCode();
      if (Max != 0D) hash ^= Max.GetHashCode();
      if (Thresh != 0D) hash ^= Thresh.GetHashCode();
      if (NTot != 0UL) hash ^= NTot.GetHashCode();
      if (NAboveThresh != 0UL) hash ^= NAboveThresh.GetHashCode();
      if (FEstatus != false) hash ^= FEstatus.GetHashCode();
      if (FEErrorMsg.Length != 0) hash ^= FEErrorMsg.GetHashCode();
      if (TempHWFE != 0) hash ^= TempHWFE.GetHashCode();
      if (MajorMainFPGA != 0) hash ^= MajorMainFPGA.GetHashCode();
      if (MinorMainFPGA != 0) hash ^= MinorMainFPGA.GetHashCode();
      if (UMajorCopro != 0) hash ^= UMajorCopro.GetHashCode();
      if (UMinorCopro != 0) hash ^= UMinorCopro.GetHashCode();
      if (UVariantCopro != 0) hash ^= UVariantCopro.GetHashCode();
      if (HWFESWVersion.Length != 0) hash ^= HWFESWVersion.GetHashCode();
      if (TempBoad1 != 0) hash ^= TempBoad1.GetHashCode();
      if (TempBoad2 != 0) hash ^= TempBoad2.GetHashCode();
      if (VersionFWBoard1.Length != 0) hash ^= VersionFWBoard1.GetHashCode();
      if (VersionFWBoard2.Length != 0) hash ^= VersionFWBoard2.GetHashCode();
      if (VersionSWBoard1.Length != 0) hash ^= VersionSWBoard1.GetHashCode();
      if (VersionSWBoard2.Length != 0) hash ^= VersionSWBoard2.GetHashCode();
      if (MajorSW != 0) hash ^= MajorSW.GetHashCode();
      if (MinorSW != 0) hash ^= MinorSW.GetHashCode();
      if (SeparationState != false) hash ^= SeparationState.GetHashCode();
      if (NbSymbSeparated != 0UL) hash ^= NbSymbSeparated.GetHashCode();
      if (NbDataInBuffer != 0UL) hash ^= NbDataInBuffer.GetHashCode();
      if (NbDataOutBuffer1 != 0UL) hash ^= NbDataOutBuffer1.GetHashCode();
      if (NbDataOutBuffer2 != 0UL) hash ^= NbDataOutBuffer2.GetHashCode();
      if (NbDataOutBuffer3 != 0UL) hash ^= NbDataOutBuffer3.GetHashCode();
      if (NbDataOutBuffer4 != 0UL) hash ^= NbDataOutBuffer4.GetHashCode();
      if (SynchroState1 != false) hash ^= SynchroState1.GetHashCode();
      if (SynchroState2 != false) hash ^= SynchroState2.GetHashCode();
      if (NbDecodedFrames1 != 0UL) hash ^= NbDecodedFrames1.GetHashCode();
      if (NbDecodedFrames2 != 0UL) hash ^= NbDecodedFrames2.GetHashCode();
      if (NbErrorFrames1 != 0UL) hash ^= NbErrorFrames1.GetHashCode();
      if (NbErrorFrames2 != 0UL) hash ^= NbErrorFrames2.GetHashCode();
      if (OverflowInBuffer != false) hash ^= OverflowInBuffer.GetHashCode();
      if (OverflowOutBuffer1 != false) hash ^= OverflowOutBuffer1.GetHashCode();
      if (OverflowOutBuffer2 != false) hash ^= OverflowOutBuffer2.GetHashCode();
      if (OverflowOutBuffer3 != false) hash ^= OverflowOutBuffer3.GetHashCode();
      if (OverflowOutBuffer4 != false) hash ^= OverflowOutBuffer4.GetHashCode();
      if (StatusBE1 != false) hash ^= StatusBE1.GetHashCode();
      if (StatusBE2 != false) hash ^= StatusBE2.GetHashCode();
      if (BE1ErrorMsg.Length != 0) hash ^= BE1ErrorMsg.GetHashCode();
      if (BE2ErrorMsg.Length != 0) hash ^= BE2ErrorMsg.GetHashCode();
      if (MSEdB != 0F) hash ^= MSEdB.GetHashCode();
      if (CN1DB != 0F) hash ^= CN1DB.GetHashCode();
      if (CN2DB != 0F) hash ^= CN2DB.GetHashCode();
      if (CNdB != 0F) hash ^= CNdB.GetHashCode();
      if (NConstPointsAvailable != 0) hash ^= NConstPointsAvailable.GetHashCode();
      hash ^= someConstPoints_.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      if (CicStatusUpdated != false) hash ^= CicStatusUpdated.GetHashCode();
      if (currentStatus_ != null) hash ^= CurrentStatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutputRMS != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(OutputRMS);
      }
      if (PeakValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PeakValue);
      }
      if (NBitsMag != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NBitsMag);
      }
      if (Max != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Max);
      }
      if (Thresh != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Thresh);
      }
      if (NTot != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(NTot);
      }
      if (NAboveThresh != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(NAboveThresh);
      }
      if (FEstatus != false) {
        output.WriteRawTag(64);
        output.WriteBool(FEstatus);
      }
      if (FEErrorMsg.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FEErrorMsg);
      }
      if (TempHWFE != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TempHWFE);
      }
      if (MajorMainFPGA != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MajorMainFPGA);
      }
      if (MinorMainFPGA != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MinorMainFPGA);
      }
      if (UMajorCopro != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(UMajorCopro);
      }
      if (UMinorCopro != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(UMinorCopro);
      }
      if (UVariantCopro != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(UVariantCopro);
      }
      if (HWFESWVersion.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(HWFESWVersion);
      }
      if (TempBoad1 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(TempBoad1);
      }
      if (TempBoad2 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(TempBoad2);
      }
      if (VersionFWBoard1.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(VersionFWBoard1);
      }
      if (VersionFWBoard2.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(VersionFWBoard2);
      }
      if (VersionSWBoard1.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(VersionSWBoard1);
      }
      if (VersionSWBoard2.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(VersionSWBoard2);
      }
      if (MajorSW != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(MajorSW);
      }
      if (MinorSW != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(MinorSW);
      }
      if (SeparationState != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(SeparationState);
      }
      if (NbSymbSeparated != 0UL) {
        output.WriteRawTag(200, 2);
        output.WriteUInt64(NbSymbSeparated);
      }
      if (NbDataInBuffer != 0UL) {
        output.WriteRawTag(208, 2);
        output.WriteUInt64(NbDataInBuffer);
      }
      if (NbDataOutBuffer1 != 0UL) {
        output.WriteRawTag(216, 2);
        output.WriteUInt64(NbDataOutBuffer1);
      }
      if (NbDataOutBuffer2 != 0UL) {
        output.WriteRawTag(224, 2);
        output.WriteUInt64(NbDataOutBuffer2);
      }
      if (NbDataOutBuffer3 != 0UL) {
        output.WriteRawTag(232, 2);
        output.WriteUInt64(NbDataOutBuffer3);
      }
      if (NbDataOutBuffer4 != 0UL) {
        output.WriteRawTag(240, 2);
        output.WriteUInt64(NbDataOutBuffer4);
      }
      if (SynchroState1 != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(SynchroState1);
      }
      if (SynchroState2 != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(SynchroState2);
      }
      if (NbDecodedFrames1 != 0UL) {
        output.WriteRawTag(136, 3);
        output.WriteUInt64(NbDecodedFrames1);
      }
      if (NbDecodedFrames2 != 0UL) {
        output.WriteRawTag(144, 3);
        output.WriteUInt64(NbDecodedFrames2);
      }
      if (NbErrorFrames1 != 0UL) {
        output.WriteRawTag(152, 3);
        output.WriteUInt64(NbErrorFrames1);
      }
      if (NbErrorFrames2 != 0UL) {
        output.WriteRawTag(160, 3);
        output.WriteUInt64(NbErrorFrames2);
      }
      if (OverflowInBuffer != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(OverflowInBuffer);
      }
      if (OverflowOutBuffer1 != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(OverflowOutBuffer1);
      }
      if (OverflowOutBuffer2 != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(OverflowOutBuffer2);
      }
      if (OverflowOutBuffer3 != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(OverflowOutBuffer3);
      }
      if (OverflowOutBuffer4 != false) {
        output.WriteRawTag(200, 3);
        output.WriteBool(OverflowOutBuffer4);
      }
      if (StatusBE1 != false) {
        output.WriteRawTag(208, 3);
        output.WriteBool(StatusBE1);
      }
      if (StatusBE2 != false) {
        output.WriteRawTag(216, 3);
        output.WriteBool(StatusBE2);
      }
      if (BE1ErrorMsg.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(BE1ErrorMsg);
      }
      if (BE2ErrorMsg.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(BE2ErrorMsg);
      }
      if (MSEdB != 0F) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(MSEdB);
      }
      if (CN1DB != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(CN1DB);
      }
      if (CN2DB != 0F) {
        output.WriteRawTag(197, 4);
        output.WriteFloat(CN2DB);
      }
      if (CNdB != 0F) {
        output.WriteRawTag(205, 4);
        output.WriteFloat(CNdB);
      }
      if (NConstPointsAvailable != 0) {
        output.WriteRawTag(208, 4);
        output.WriteUInt32(NConstPointsAvailable);
      }
      someConstPoints_.WriteTo(output, _repeated_someConstPoints_codec);
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(ErrorMsg);
      }
      if (CicStatusUpdated != false) {
        output.WriteRawTag(232, 4);
        output.WriteBool(CicStatusUpdated);
      }
      if (currentStatus_ != null) {
        output.WriteRawTag(242, 4);
        output.WriteMessage(CurrentStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutputRMS != 0D) {
        size += 1 + 8;
      }
      if (PeakValue != 0D) {
        size += 1 + 8;
      }
      if (NBitsMag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NBitsMag);
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (Thresh != 0D) {
        size += 1 + 8;
      }
      if (NTot != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NTot);
      }
      if (NAboveThresh != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NAboveThresh);
      }
      if (FEstatus != false) {
        size += 1 + 1;
      }
      if (FEErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FEErrorMsg);
      }
      if (TempHWFE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TempHWFE);
      }
      if (MajorMainFPGA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MajorMainFPGA);
      }
      if (MinorMainFPGA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinorMainFPGA);
      }
      if (UMajorCopro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UMajorCopro);
      }
      if (UMinorCopro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UMinorCopro);
      }
      if (UVariantCopro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UVariantCopro);
      }
      if (HWFESWVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HWFESWVersion);
      }
      if (TempBoad1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TempBoad1);
      }
      if (TempBoad2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TempBoad2);
      }
      if (VersionFWBoard1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VersionFWBoard1);
      }
      if (VersionFWBoard2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VersionFWBoard2);
      }
      if (VersionSWBoard1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VersionSWBoard1);
      }
      if (VersionSWBoard2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VersionSWBoard2);
      }
      if (MajorSW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MajorSW);
      }
      if (MinorSW != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinorSW);
      }
      if (SeparationState != false) {
        size += 2 + 1;
      }
      if (NbSymbSeparated != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbSymbSeparated);
      }
      if (NbDataInBuffer != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbDataInBuffer);
      }
      if (NbDataOutBuffer1 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbDataOutBuffer1);
      }
      if (NbDataOutBuffer2 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbDataOutBuffer2);
      }
      if (NbDataOutBuffer3 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbDataOutBuffer3);
      }
      if (NbDataOutBuffer4 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbDataOutBuffer4);
      }
      if (SynchroState1 != false) {
        size += 2 + 1;
      }
      if (SynchroState2 != false) {
        size += 2 + 1;
      }
      if (NbDecodedFrames1 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbDecodedFrames1);
      }
      if (NbDecodedFrames2 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbDecodedFrames2);
      }
      if (NbErrorFrames1 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbErrorFrames1);
      }
      if (NbErrorFrames2 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(NbErrorFrames2);
      }
      if (OverflowInBuffer != false) {
        size += 2 + 1;
      }
      if (OverflowOutBuffer1 != false) {
        size += 2 + 1;
      }
      if (OverflowOutBuffer2 != false) {
        size += 2 + 1;
      }
      if (OverflowOutBuffer3 != false) {
        size += 2 + 1;
      }
      if (OverflowOutBuffer4 != false) {
        size += 2 + 1;
      }
      if (StatusBE1 != false) {
        size += 2 + 1;
      }
      if (StatusBE2 != false) {
        size += 2 + 1;
      }
      if (BE1ErrorMsg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BE1ErrorMsg);
      }
      if (BE2ErrorMsg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BE2ErrorMsg);
      }
      if (MSEdB != 0F) {
        size += 2 + 4;
      }
      if (CN1DB != 0F) {
        size += 2 + 4;
      }
      if (CN2DB != 0F) {
        size += 2 + 4;
      }
      if (CNdB != 0F) {
        size += 2 + 4;
      }
      if (NConstPointsAvailable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NConstPointsAvailable);
      }
      size += someConstPoints_.CalculateSize(_repeated_someConstPoints_codec);
      if (ErrorMsg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      if (CicStatusUpdated != false) {
        size += 2 + 1;
      }
      if (currentStatus_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CurrentStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonitoringReport other) {
      if (other == null) {
        return;
      }
      if (other.OutputRMS != 0D) {
        OutputRMS = other.OutputRMS;
      }
      if (other.PeakValue != 0D) {
        PeakValue = other.PeakValue;
      }
      if (other.NBitsMag != 0) {
        NBitsMag = other.NBitsMag;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.Thresh != 0D) {
        Thresh = other.Thresh;
      }
      if (other.NTot != 0UL) {
        NTot = other.NTot;
      }
      if (other.NAboveThresh != 0UL) {
        NAboveThresh = other.NAboveThresh;
      }
      if (other.FEstatus != false) {
        FEstatus = other.FEstatus;
      }
      if (other.FEErrorMsg.Length != 0) {
        FEErrorMsg = other.FEErrorMsg;
      }
      if (other.TempHWFE != 0) {
        TempHWFE = other.TempHWFE;
      }
      if (other.MajorMainFPGA != 0) {
        MajorMainFPGA = other.MajorMainFPGA;
      }
      if (other.MinorMainFPGA != 0) {
        MinorMainFPGA = other.MinorMainFPGA;
      }
      if (other.UMajorCopro != 0) {
        UMajorCopro = other.UMajorCopro;
      }
      if (other.UMinorCopro != 0) {
        UMinorCopro = other.UMinorCopro;
      }
      if (other.UVariantCopro != 0) {
        UVariantCopro = other.UVariantCopro;
      }
      if (other.HWFESWVersion.Length != 0) {
        HWFESWVersion = other.HWFESWVersion;
      }
      if (other.TempBoad1 != 0) {
        TempBoad1 = other.TempBoad1;
      }
      if (other.TempBoad2 != 0) {
        TempBoad2 = other.TempBoad2;
      }
      if (other.VersionFWBoard1.Length != 0) {
        VersionFWBoard1 = other.VersionFWBoard1;
      }
      if (other.VersionFWBoard2.Length != 0) {
        VersionFWBoard2 = other.VersionFWBoard2;
      }
      if (other.VersionSWBoard1.Length != 0) {
        VersionSWBoard1 = other.VersionSWBoard1;
      }
      if (other.VersionSWBoard2.Length != 0) {
        VersionSWBoard2 = other.VersionSWBoard2;
      }
      if (other.MajorSW != 0) {
        MajorSW = other.MajorSW;
      }
      if (other.MinorSW != 0) {
        MinorSW = other.MinorSW;
      }
      if (other.SeparationState != false) {
        SeparationState = other.SeparationState;
      }
      if (other.NbSymbSeparated != 0UL) {
        NbSymbSeparated = other.NbSymbSeparated;
      }
      if (other.NbDataInBuffer != 0UL) {
        NbDataInBuffer = other.NbDataInBuffer;
      }
      if (other.NbDataOutBuffer1 != 0UL) {
        NbDataOutBuffer1 = other.NbDataOutBuffer1;
      }
      if (other.NbDataOutBuffer2 != 0UL) {
        NbDataOutBuffer2 = other.NbDataOutBuffer2;
      }
      if (other.NbDataOutBuffer3 != 0UL) {
        NbDataOutBuffer3 = other.NbDataOutBuffer3;
      }
      if (other.NbDataOutBuffer4 != 0UL) {
        NbDataOutBuffer4 = other.NbDataOutBuffer4;
      }
      if (other.SynchroState1 != false) {
        SynchroState1 = other.SynchroState1;
      }
      if (other.SynchroState2 != false) {
        SynchroState2 = other.SynchroState2;
      }
      if (other.NbDecodedFrames1 != 0UL) {
        NbDecodedFrames1 = other.NbDecodedFrames1;
      }
      if (other.NbDecodedFrames2 != 0UL) {
        NbDecodedFrames2 = other.NbDecodedFrames2;
      }
      if (other.NbErrorFrames1 != 0UL) {
        NbErrorFrames1 = other.NbErrorFrames1;
      }
      if (other.NbErrorFrames2 != 0UL) {
        NbErrorFrames2 = other.NbErrorFrames2;
      }
      if (other.OverflowInBuffer != false) {
        OverflowInBuffer = other.OverflowInBuffer;
      }
      if (other.OverflowOutBuffer1 != false) {
        OverflowOutBuffer1 = other.OverflowOutBuffer1;
      }
      if (other.OverflowOutBuffer2 != false) {
        OverflowOutBuffer2 = other.OverflowOutBuffer2;
      }
      if (other.OverflowOutBuffer3 != false) {
        OverflowOutBuffer3 = other.OverflowOutBuffer3;
      }
      if (other.OverflowOutBuffer4 != false) {
        OverflowOutBuffer4 = other.OverflowOutBuffer4;
      }
      if (other.StatusBE1 != false) {
        StatusBE1 = other.StatusBE1;
      }
      if (other.StatusBE2 != false) {
        StatusBE2 = other.StatusBE2;
      }
      if (other.BE1ErrorMsg.Length != 0) {
        BE1ErrorMsg = other.BE1ErrorMsg;
      }
      if (other.BE2ErrorMsg.Length != 0) {
        BE2ErrorMsg = other.BE2ErrorMsg;
      }
      if (other.MSEdB != 0F) {
        MSEdB = other.MSEdB;
      }
      if (other.CN1DB != 0F) {
        CN1DB = other.CN1DB;
      }
      if (other.CN2DB != 0F) {
        CN2DB = other.CN2DB;
      }
      if (other.CNdB != 0F) {
        CNdB = other.CNdB;
      }
      if (other.NConstPointsAvailable != 0) {
        NConstPointsAvailable = other.NConstPointsAvailable;
      }
      someConstPoints_.Add(other.someConstPoints_);
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
      if (other.CicStatusUpdated != false) {
        CicStatusUpdated = other.CicStatusUpdated;
      }
      if (other.currentStatus_ != null) {
        if (currentStatus_ == null) {
          currentStatus_ = new global::CICD.CicStatus();
        }
        CurrentStatus.MergeFrom(other.CurrentStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            OutputRMS = input.ReadDouble();
            break;
          }
          case 17: {
            PeakValue = input.ReadDouble();
            break;
          }
          case 24: {
            NBitsMag = input.ReadUInt32();
            break;
          }
          case 33: {
            Max = input.ReadDouble();
            break;
          }
          case 41: {
            Thresh = input.ReadDouble();
            break;
          }
          case 48: {
            NTot = input.ReadUInt64();
            break;
          }
          case 56: {
            NAboveThresh = input.ReadUInt64();
            break;
          }
          case 64: {
            FEstatus = input.ReadBool();
            break;
          }
          case 74: {
            FEErrorMsg = input.ReadString();
            break;
          }
          case 80: {
            TempHWFE = input.ReadInt32();
            break;
          }
          case 88: {
            MajorMainFPGA = input.ReadUInt32();
            break;
          }
          case 96: {
            MinorMainFPGA = input.ReadUInt32();
            break;
          }
          case 104: {
            UMajorCopro = input.ReadUInt32();
            break;
          }
          case 112: {
            UMinorCopro = input.ReadUInt32();
            break;
          }
          case 120: {
            UVariantCopro = input.ReadUInt32();
            break;
          }
          case 130: {
            HWFESWVersion = input.ReadString();
            break;
          }
          case 160: {
            TempBoad1 = input.ReadInt32();
            break;
          }
          case 168: {
            TempBoad2 = input.ReadInt32();
            break;
          }
          case 178: {
            VersionFWBoard1 = input.ReadString();
            break;
          }
          case 186: {
            VersionFWBoard2 = input.ReadString();
            break;
          }
          case 194: {
            VersionSWBoard1 = input.ReadString();
            break;
          }
          case 202: {
            VersionSWBoard2 = input.ReadString();
            break;
          }
          case 208: {
            MajorSW = input.ReadUInt32();
            break;
          }
          case 216: {
            MinorSW = input.ReadUInt32();
            break;
          }
          case 320: {
            SeparationState = input.ReadBool();
            break;
          }
          case 328: {
            NbSymbSeparated = input.ReadUInt64();
            break;
          }
          case 336: {
            NbDataInBuffer = input.ReadUInt64();
            break;
          }
          case 344: {
            NbDataOutBuffer1 = input.ReadUInt64();
            break;
          }
          case 352: {
            NbDataOutBuffer2 = input.ReadUInt64();
            break;
          }
          case 360: {
            NbDataOutBuffer3 = input.ReadUInt64();
            break;
          }
          case 368: {
            NbDataOutBuffer4 = input.ReadUInt64();
            break;
          }
          case 376: {
            SynchroState1 = input.ReadBool();
            break;
          }
          case 384: {
            SynchroState2 = input.ReadBool();
            break;
          }
          case 392: {
            NbDecodedFrames1 = input.ReadUInt64();
            break;
          }
          case 400: {
            NbDecodedFrames2 = input.ReadUInt64();
            break;
          }
          case 408: {
            NbErrorFrames1 = input.ReadUInt64();
            break;
          }
          case 416: {
            NbErrorFrames2 = input.ReadUInt64();
            break;
          }
          case 424: {
            OverflowInBuffer = input.ReadBool();
            break;
          }
          case 432: {
            OverflowOutBuffer1 = input.ReadBool();
            break;
          }
          case 440: {
            OverflowOutBuffer2 = input.ReadBool();
            break;
          }
          case 448: {
            OverflowOutBuffer3 = input.ReadBool();
            break;
          }
          case 456: {
            OverflowOutBuffer4 = input.ReadBool();
            break;
          }
          case 464: {
            StatusBE1 = input.ReadBool();
            break;
          }
          case 472: {
            StatusBE2 = input.ReadBool();
            break;
          }
          case 482: {
            BE1ErrorMsg = input.ReadString();
            break;
          }
          case 490: {
            BE2ErrorMsg = input.ReadString();
            break;
          }
          case 565: {
            MSEdB = input.ReadFloat();
            break;
          }
          case 573: {
            CN1DB = input.ReadFloat();
            break;
          }
          case 581: {
            CN2DB = input.ReadFloat();
            break;
          }
          case 589: {
            CNdB = input.ReadFloat();
            break;
          }
          case 592: {
            NConstPointsAvailable = input.ReadUInt32();
            break;
          }
          case 602:
          case 605: {
            someConstPoints_.AddEntriesFrom(input, _repeated_someConstPoints_codec);
            break;
          }
          case 610: {
            ErrorMsg = input.ReadString();
            break;
          }
          case 616: {
            CicStatusUpdated = input.ReadBool();
            break;
          }
          case 626: {
            if (currentStatus_ == null) {
              currentStatus_ = new global::CICD.CicStatus();
            }
            input.ReadMessage(currentStatus_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FEConfStatusChanged : pb::IMessage<FEConfStatusChanged> {
    private static readonly pb::MessageParser<FEConfStatusChanged> _parser = new pb::MessageParser<FEConfStatusChanged>(() => new FEConfStatusChanged());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FEConfStatusChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEConfStatusChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEConfStatusChanged(FEConfStatusChanged other) : this() {
      returnCode_ = other.returnCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEConfStatusChanged Clone() {
      return new FEConfStatusChanged(this);
    }

    /// <summary>Field number for the "return_code" field.</summary>
    public const int ReturnCodeFieldNumber = 1;
    private bool returnCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FEConfStatusChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FEConfStatusChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReturnCode != other.ReturnCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReturnCode != false) hash ^= ReturnCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReturnCode != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReturnCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReturnCode != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FEConfStatusChanged other) {
      if (other == null) {
        return;
      }
      if (other.ReturnCode != false) {
        ReturnCode = other.ReturnCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReturnCode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class allFileProcessed : pb::IMessage<allFileProcessed> {
    private static readonly pb::MessageParser<allFileProcessed> _parser = new pb::MessageParser<allFileProcessed>(() => new allFileProcessed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<allFileProcessed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public allFileProcessed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public allFileProcessed(allFileProcessed other) : this() {
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public allFileProcessed Clone() {
      return new allFileProcessed(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as allFileProcessed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(allFileProcessed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(allFileProcessed other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SWFE_state_changed : pb::IMessage<SWFE_state_changed> {
    private static readonly pb::MessageParser<SWFE_state_changed> _parser = new pb::MessageParser<SWFE_state_changed>(() => new SWFE_state_changed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SWFE_state_changed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SWFE_state_changed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SWFE_state_changed(SWFE_state_changed other) : this() {
      returnCode_ = other.returnCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SWFE_state_changed Clone() {
      return new SWFE_state_changed(this);
    }

    /// <summary>Field number for the "return_code" field.</summary>
    public const int ReturnCodeFieldNumber = 1;
    private global::CICD.SWFE_state returnCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.SWFE_state ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SWFE_state_changed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SWFE_state_changed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReturnCode != other.ReturnCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReturnCode != 0) hash ^= ReturnCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReturnCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReturnCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReturnCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SWFE_state_changed other) {
      if (other == null) {
        return;
      }
      if (other.ReturnCode != 0) {
        ReturnCode = other.ReturnCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            returnCode_ = (global::CICD.SWFE_state) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HWFE_state_changed : pb::IMessage<HWFE_state_changed> {
    private static readonly pb::MessageParser<HWFE_state_changed> _parser = new pb::MessageParser<HWFE_state_changed>(() => new HWFE_state_changed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HWFE_state_changed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HWFE_state_changed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HWFE_state_changed(HWFE_state_changed other) : this() {
      returnCode_ = other.returnCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HWFE_state_changed Clone() {
      return new HWFE_state_changed(this);
    }

    /// <summary>Field number for the "return_code" field.</summary>
    public const int ReturnCodeFieldNumber = 1;
    private global::CICD.HWFE_state returnCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.HWFE_state ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HWFE_state_changed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HWFE_state_changed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReturnCode != other.ReturnCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReturnCode != 0) hash ^= ReturnCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReturnCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReturnCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReturnCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HWFE_state_changed other) {
      if (other == null) {
        return;
      }
      if (other.ReturnCode != 0) {
        ReturnCode = other.ReturnCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            returnCode_ = (global::CICD.HWFE_state) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class getHeader : pb::IMessage<getHeader> {
    private static readonly pb::MessageParser<getHeader> _parser = new pb::MessageParser<getHeader>(() => new getHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<getHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public getHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public getHeader(getHeader other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public getHeader Clone() {
      return new getHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::CICD.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as getHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(getHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(getHeader other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::CICD.Header();
        }
        Header.MergeFrom(other.Header);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::CICD.Header();
            }
            input.ReadMessage(header_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class log_message : pb::IMessage<log_message> {
    private static readonly pb::MessageParser<log_message> _parser = new pb::MessageParser<log_message>(() => new log_message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<log_message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CICD.CICDReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public log_message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public log_message(log_message other) : this() {
      type_ = other.type_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public log_message Clone() {
      return new log_message(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::CICD.severity type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CICD.severity Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as log_message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(log_message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(log_message other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::CICD.severity) input.ReadEnum();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
