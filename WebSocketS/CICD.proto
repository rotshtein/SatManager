syntax = "proto3";


package CICD;

// version 1.3


/**
 * Modulation BPSK, QPSK, 8PSK, 8QAM, 16QAM, 16APSK, 32APSK
 */

enum Modulation
{
	BPSK = 0;
	QPSK = 1;
	PSK8 = 2;
	QAM8 = 3;
	QAM16 = 4;
	APSK16 = 5;
	APSK32 = 6;
	UNKNOWNMOD =7;
}

enum FEC
{
	TPC_3_4 = 0;
	TPC_7_8 = 1;
	TPC_0_95 = 2;
	LDPC_2_3 = 3;
	LDPC_3_4 = 4;
	VFEC_0_533 = 5;
	VFEC_0_631 = 6;
	VFEC_0_706 = 7;
	VFEC_0_803 = 8;
	VFEC_0_576 = 9;
	VFEC_0_642 = 10;
	VFEC_0_711 = 11;
	VFEC_0_780 = 12;
	UNKNOWNFEC = 13;
}


/**
 * InputType
 *
 */
enum InputType
{
    REAL = 0;
    COMPLEX =1;
}

/**
 * SubType
 *
 */
enum SubType
{
    TYPE_UINT16 = 0;
    TYPE_INT16 =1;
    TYPE_UINT32 = 2;
    TYPE_INT =3;
    TYPE_FLOAT = 4;
    TYPE_DOUBLE =5;
}

/**
 * Front end type: HW, SW
 */

enum FrontendType
{
    HW = 0;
    SW = 1;
}

/**
 * SWFE state
 */

enum SWFE_state
{
    SWFE_STOPPED = 0;
    SWFE_PAUSED = 1;
    SWFE_RUNNING = 2;
}

/**
 * HWFE state
 */

enum HWFE_state
{
    HWFE_STOPPED = 0;
    HWFE_RUNNING = 1;
}

/**
 * CICD FE state
 */

enum CICD_FEstate
{
    FE_STOPPED = 0;
    FE_PAUSED = 1;
    FE_RUNNING = 2;
}



/**
 * \enum SpectreType
 * - Regular : Pas d'inversion
 * - Invert1 : I->Q; Q->I
 * - Invert2 : I->-Q; Q->I
 */
enum SpectreType
{
  REGULAR = 0;
  INVERT1 = 1;
  INVERT2 = 2;
};


/**
 * \enum FEC types
 * Fec
* - TPC    : TPC
* - LDPC   : LDPC
* - VFEC   : VERSA FEC
* - Unknown: Unknown
*/
enum FecType
{
  TPC    = 0;
  LDPC    = 1;
  VFEC    = 2;
  UNKNOWNFECTYPE   = 3;
}

enum outputType
{
    toFile = 0;
    toUDP = 1;
};


enum severity
{
    INFO = 0;
    WARNING = 1;
    CRITICAL = 2;
    FATAL = 3;
    UNKNOWN = 4;
    
}


enum OPCODE
{
	HEADER = 0;
	ACK = 1;
	NACK = 2;
	
	
	// Client to Server
	CONFIGURE_SWFE = 3;
	CONFIGURE_HWFE = 4;	
	START_FE = 5;
	STOP_FE = 6;
	STOP = 19;
	IDENTIFY = 7;
	IDENTIFY_AND_SEPARATE = 8;
	REQUEST_MONITORING_REPORT =9;
	
	// Server to Client
	FE_CONFSTATUS_CHANGED = 10;
	ALLFILEPROCESSED = 11;
	SWFE_STATE_CHANGED = 12;
	HWFE_STATE_CHANGED = 13;
	CICD_STATE_CHANGED = 14;
	MONITORING_REPORT = 15;
	LOG_MESSAGE = 16;
	
	IDENTIFICATION_REPORT = 20;

}


/*****************************************************************************************************************************/
//
message Header
{
	int32 sequence = 1;
	OPCODE opcode = 2;			// Opcode
	bytes message_data = 3;
}


message configure_SWFE {
  string filename = 1;
  InputType inputsignaltype = 2;
  SubType inputsignalsubtypefromfile = 3;
  float feinhz = 4;
  float fchz = 5;
  float usefulbwhz = 6;
  float gaindb = 7;
  bool wideband = 8;

}

message configure_HWFE {
  float feinhz = 4;
  float fchz = 5;
  float usefulbwhz = 6;
  float gaindb = 7;
  bool wideband = 8;
}



message Identify
{

  float	cncarrierdb = 1;	//estimated composite C/N of the carrier of interest (dB).
}


message IdentifyAndSeparate {
 float	cncarrierdb = 1;	//estimated composite C/N of the carrier of interest (dB).
 
 outputType output =2 ; // to files or to udp
 string fileName = 3; // The output filename. The format should be file://<full path with filename and extention>
 string output1Url = 4; // The output url. The format should be udp://<host ip>:port or file://<full path with filename and extention>
 string output2Url = 5; // see output1Url
}
 


message CarrierInfo
{
	float	amplitude = 1;
	float	freqHz = 2;
	float	baudRateBd = 3;
	int32	nbps = 4;
	float	Rc = 5;
	Modulation	modulation = 6;
	FecType	fecType = 7;
	FEC	Fec = 8;
	SpectreType	spectrumType = 9;
}

message CicStatus
{
	bool	cicPresent = 2;		// brief cicPresent : presence (true) or absence of CIC (false)
	int32	errNb = 3;				
	float	fcHz = 4;				// Cetral frequency
	float	compositeSnrDB = 5;	//composite signal to noise ratio of composite signal in dB
	CarrierInfo	carrier1 = 6;			//Info of stronger component signal
	CarrierInfo	carrier2 = 7;			//Info of waker component signal
}



message MonitoringReport 
{

    // Front End Status:
    //---------------------------------------
  
    // all in linear scale (dB only in display)
    double outputRMS = 1; // RMS of signal at the output of frontend = input of separator    
    double peakValue = 2; // peak value of signal at the output of frontend
    uint32 nBitsMag = 3; // number of effective bits at the output of frontend   
    double max = 4; // max magnitude of signal at the output of frontend   
    double thresh = 5; // magnitude threshold to measure number of samples with magnitude above threshold
    // at the output of frontend   
    uint64 nTot = 6; // total number of samples at the output of frontend  
    uint64 nAboveThresh = 7;// total number of samples at the output of frontend above threshold
    bool FEstatus = 8;
    string FEErrorMsg = 9;
    int32 tempHWFE = 10; // temperature of HWFE FPGA

    // versions
    uint32 majorMainFPGA = 11; // HWFE main FPGA: FW major version
    uint32 minorMainFPGA = 12; // HWFE main FPGA: FW minor version
    uint32 uMajorCopro = 13; // HWFE coprocessor FPGA: FW major version
    uint32 uMinorCopro = 14; // HWFE coprocessor FPGA: FW minor version
    uint32 uVariantCopro = 15; // HWFE coprocessor FPGA: FW revision number
    string HWFESWVersion = 16; // HWFE SW version
    

    // Separator boards Status:
    //---------------------------------------
    int32      tempBoad1 = 20; // temperature of separator board1 FPGA
    int32      tempBoad2 = 21; // temperature of separator board2 FPGA    
    string  versionFWBoard1 = 22; // FW version of separator board1 FPGA, 3 values
    string  versionFWBoard2 = 23; // FW version of separator board2 FPGA, 3 values
    string   versionSWBoard1 = 24; // SW (driver) version of separator board1, 3 values
    string   versionSWBoard2 = 25; // SW (driver) version of separator board2, 3 values
    uint32 majorSW = 26; // SW major version
    uint32 minorSW = 27; // SW minor version

    
    // CICD Status:
    //---------------------------------------
    bool separationState = 40;  // true: separation in process
    uint64 nbSymbSeparated = 41; // total number of separated symbols
    uint64 nbDataInBuffer = 42; // number of data in input buffer
    uint64 nbDataOutBuffer1 = 43; // number of data in ouput buffer 1
    uint64 nbDataOutBuffer2 = 44; // number of data in ouput buffer 2
    uint64 nbDataOutBuffer3 = 45; // number of data in ouput buffer 3
    uint64 nbDataOutBuffer4 = 46; // number of data in ouput buffer 4

    bool synchroState1 = 47; // true: FEC decoder of channel 1 locked
    bool synchroState2 = 48; // true: FEC decoder of channel 2 locked
    uint64  nbDecodedFrames1 = 49; // number of decoded FEC frames of channel 1
    uint64  nbDecodedFrames2 = 50; // number of decoded FEC frames of channel 2
    uint64  nbErrorFrames1 = 51; // number of erroneous FEC frames of channel 1
    uint64  nbErrorFrames2 = 52; // number of erroneous FEC frames of channel 2
    
    bool overflowInBuffer = 53; // true: overflow of Rx buffer: input rate to processing boards must be reduced
    bool overflowOutBuffer1 = 54; // true: overflow of ouput buffer 1: output reading rate must be increased
    bool overflowOutBuffer2 = 55; // true: overflow of ouput buffer 2: output reading rate must be increased
    bool overflowOutBuffer3 = 56; // true: overflow of ouput buffer 3: output reading rate must be increased
    bool overflowOutBuffer4 = 57; // true: overflow of ouput buffer 4: output reading rate must be increased
    

    bool statusBE1 = 58; // true: backend of channel 1 started
    bool statusBE2 = 59; // true: backend of channel 2 started
    string BE1ErrorMsg = 60; // backend 1 error message
    string BE2ErrorMsg = 61; // backend 2 error message
   
    float MSEdB = 70; // mean square error on channel 2 after turbo cancellation      
    float CN1dB = 71; // C/N of channel 1
    float CN2dB = 72; // C/N of channel 2
    float CNdB = 73; // C/N of composite signal

    // for constellation display after turbo cancellation
    uint32 nConstPointsAvailable = 74; // number of available constellation nConstPointsAvailable
    // of channel 2 after turbo cancellation (in complex samples, <= 1000)
    repeated float someConstPoints = 75;  // interleaved I,Q complex constellation points 
    // (nConstPointsAvailable*2 samples)
    
    
    string errorMsg = 76; // error message, empty if no error
    
    bool cicStatusUpdated = 77; // true if CicStatus has been updated
    CicStatus currentStatus = 78;

}

message FEConfStatusChanged {
	bool		return_code	= 1;
}

message allFileProcessed {
	string		msg	= 1;
}

message SWFE_state_changed {
	SWFE_state		return_code	= 1;
}

message HWFE_state_changed {
	HWFE_state		return_code	= 1;
}




message getHeader {
	Header header                    = 1;
}


message log_message {
  severity type = 1;
  string msg = 2;
  }
