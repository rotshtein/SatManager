// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MedCic.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MedcicProto {

  /// <summary>Holder for reflection information generated from MedCic.proto</summary>
  public static partial class MedCicReflection {

    #region Descriptor
    /// <summary>File descriptor for MedCic.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MedCicReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxNZWRDaWMucHJvdG8SDG1lZGNpY19wcm90byJWCgZIZWFkZXISEAoIc2Vx",
            "dWVuY2UYASABKAUSJAoGb3Bjb2RlGAIgASgOMhQubWVkY2ljX3Byb3RvLk9Q",
            "Q09ERRIUCgxtZXNzYWdlX2RhdGEYAyABKAwiaQoVQXV0b21hdGljU3RhcnRD",
            "b21tYW5kEhIKCmlucHV0MV91cmwYASABKAkSEgoKaW5wdXQyX3VybBgCIAEo",
            "CRITCgtvdXRwdXQxX3VybBgDIAEoCRITCgtvdXRwdXQyX3VybBgEIAEoCSKU",
            "AQoMU3RhcnRDb21tYW5kEhIKCmlucHV0MV91cmwYASABKAkSEgoKaW5wdXQy",
            "X3VybBgCIAEoCRITCgtvdXRwdXQxX3VybBgDIAEoCRITCgtvdXRwdXQyX3Vy",
            "bBgEIAEoCRIyCg1lbmNhcHN1bGF0aW9uGAUgASgOMhsubWVkY2ljX3Byb3Rv",
            "LkVOQ0FQU1VMQVRJT04iDQoLU3RvcENvbW1hbmQiBQoDQWNrIgYKBE5hY2si",
            "DwoNU3RhdHVzUmVxdWVzdCKRAwoMU3RhdHVzUmVwbGF5EiQKBnN0YXR1cxgB",
            "IAEoDjIULm1lZGNpY19wcm90by5TVEFUVVMSLgoJY2ljMUlucHV0GAIgASgO",
            "MhsubWVkY2ljX3Byb3RvLkNIQU5FTF9TVEFUVVMSLgoJY2ljMklucHV0GAMg",
            "ASgOMhsubWVkY2ljX3Byb3RvLkNIQU5FTF9TVEFUVVMSLwoKY2ljMU91dHB1",
            "dBgEIAEoDjIbLm1lZGNpY19wcm90by5DSEFORUxfU1RBVFVTEi8KCmNpYzJP",
            "dXRwdXQYBSABKA4yGy5tZWRjaWNfcHJvdG8uQ0hBTkVMX1NUQVRVUxIaChJz",
            "dGF0dXNfZGVzY3JpcHRpb24YBiABKAkSDwoHd2FybmluZxgHIAEoCBIXCg93",
            "YXJuaW5nX21lc3NhZ2UYCCABKAkSFgoOd2FybmluZ19udW1iZXIYCSABKAUS",
            "DQoFZXJyb3IYCiABKAgSFgoOZXJyb3JfbU1lc3NhZ2UYCyABKAkSFAoMZXJy",
            "b3JfbnVtYmVyGAwgASgFIiAKDVN0YXR1c01lc3NhZ2USDwoHbWVzc2FnZRgB",
            "IAEoCSJGCg1HZXRTYW1wbGVGaWxlEhEKCWlucHV0X3VybBgBIAEoCRIQCghm",
            "aWxlbmFtZRgCIAEoCRIQCghkdXJhdGlvbhgDIAEoBSJNChdJZGVudGlmaWVk",
            "RW5jYXBzdWxhdGlvbhIyCg1lbmNhcHN1bGF0aW9uGAEgASgOMhsubWVkY2lj",
            "X3Byb3RvLkVOQ0FQU1VMQVRJT04ijAEKEFN0YXRpc3RpY3NSZXBsYXkSHAoU",
            "Q2ljMUlucHV0Qnl0ZUNvdW50ZXIYASABKAMSHAoUQ2ljMklucHV0Qnl0ZUNv",
            "dW50ZXIYAiABKAMSHQoVQ2ljMU91dHB1dEJ5dGVDb3VudGVyGAMgASgDEh0K",
            "FUNpYzJPdXRwdXRCeXRlQ291bnRlchgEIAEoAyozCgZTVEFUVVMSBwoDUlVO",
            "EAASCAoEU1RPUBABEgkKBUVSUk9SEAISCwoHV0FSTklORxADKjcKDUNIQU5F",
            "TF9TVEFUVVMSCwoHVU5LTk9XThAAEg8KC09VVF9PRl9TWU5DEAESCAoEU1lO",
            "QxACKpwBCg1FTkNBUFNVTEFUSU9OEgYKAkRJEAASCwoHRElfUExVUxABEgkK",
            "BUVETUFDEAISDwoLRURNQUMyXzI5MjgQAxIPCgtFRE1BQzJfMzA3MhAEEgsK",
            "B0VTQ181MzIQBRILCgdFU0NfNTUxEAYSDAoIRVNDXzExMDQQBxIMCghFU0Nf",
            "MTc5MhAIEgYKAkUyEAkSCwoHRVNDXzg3NBAKKt0BCgZPUENPREUSCgoGSEVB",
            "REVSEAASBwoDQUNLEAESCAoETkFDSxACEhIKDkFVVE9fU1RBUlRfQ01EEAMS",
            "DQoJU1RBUlRfQ01EEAQSDAoIU1RPUF9DTUQQBRISCg5TVEFUVVNfUkVRVUVT",
            "VBAGEhEKDVNUQVRVU19SRVBMQVkQBxISCg5TVEFUVVNfTUVTU0FHRRAIEhMK",
            "D0dFVF9TQU1QTEVfRklMRRAJEhwKGElERU5UWVBJRURfRU5DQVBTVUxBVElP",
            "ThAKEhUKEVNUQVRJU1RJQ1NfUkVQTEFZEAtiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MedcicProto.STATUS), typeof(global::MedcicProto.CHANEL_STATUS), typeof(global::MedcicProto.ENCAPSULATION), typeof(global::MedcicProto.OPCODE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.Header), global::MedcicProto.Header.Parser, new[]{ "Sequence", "Opcode", "MessageData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.AutomaticStartCommand), global::MedcicProto.AutomaticStartCommand.Parser, new[]{ "Input1Url", "Input2Url", "Output1Url", "Output2Url" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.StartCommand), global::MedcicProto.StartCommand.Parser, new[]{ "Input1Url", "Input2Url", "Output1Url", "Output2Url", "Encapsulation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.StopCommand), global::MedcicProto.StopCommand.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.Ack), global::MedcicProto.Ack.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.Nack), global::MedcicProto.Nack.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.StatusRequest), global::MedcicProto.StatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.StatusReplay), global::MedcicProto.StatusReplay.Parser, new[]{ "Status", "Cic1Input", "Cic2Input", "Cic1Output", "Cic2Output", "StatusDescription", "Warning", "WarningMessage", "WarningNumber", "Error", "ErrorMMessage", "ErrorNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.StatusMessage), global::MedcicProto.StatusMessage.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.GetSampleFile), global::MedcicProto.GetSampleFile.Parser, new[]{ "InputUrl", "Filename", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.IdentifiedEncapsulation), global::MedcicProto.IdentifiedEncapsulation.Parser, new[]{ "Encapsulation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MedcicProto.StatisticsReplay), global::MedcicProto.StatisticsReplay.Parser, new[]{ "Cic1InputByteCounter", "Cic2InputByteCounter", "Cic1OutputByteCounter", "Cic2OutputByteCounter" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum STATUS {
    [pbr::OriginalName("RUN")] Run = 0,
    [pbr::OriginalName("STOP")] Stop = 1,
    [pbr::OriginalName("ERROR")] Error = 2,
    [pbr::OriginalName("WARNING")] Warning = 3,
  }

  public enum CHANEL_STATUS {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("OUT_OF_SYNC")] OutOfSync = 1,
    [pbr::OriginalName("SYNC")] Sync = 2,
  }

  public enum ENCAPSULATION {
    [pbr::OriginalName("DI")] Di = 0,
    [pbr::OriginalName("DI_PLUS")] DiPlus = 1,
    [pbr::OriginalName("EDMAC")] Edmac = 2,
    [pbr::OriginalName("EDMAC2_2928")] Edmac22928 = 3,
    [pbr::OriginalName("EDMAC2_3072")] Edmac23072 = 4,
    [pbr::OriginalName("ESC_532")] Esc532 = 5,
    [pbr::OriginalName("ESC_551")] Esc551 = 6,
    [pbr::OriginalName("ESC_1104")] Esc1104 = 7,
    [pbr::OriginalName("ESC_1792")] Esc1792 = 8,
    [pbr::OriginalName("E2")] E2 = 9,
    [pbr::OriginalName("ESC_874")] Esc874 = 10,
  }

  public enum OPCODE {
    [pbr::OriginalName("HEADER")] Header = 0,
    [pbr::OriginalName("ACK")] Ack = 1,
    [pbr::OriginalName("NACK")] Nack = 2,
    [pbr::OriginalName("AUTO_START_CMD")] AutoStartCmd = 3,
    [pbr::OriginalName("START_CMD")] StartCmd = 4,
    [pbr::OriginalName("STOP_CMD")] StopCmd = 5,
    [pbr::OriginalName("STATUS_REQUEST")] StatusRequest = 6,
    [pbr::OriginalName("STATUS_REPLAY")] StatusReplay = 7,
    [pbr::OriginalName("STATUS_MESSAGE")] StatusMessage = 8,
    [pbr::OriginalName("GET_SAMPLE_FILE")] GetSampleFile = 9,
    [pbr::OriginalName("IDENTYPIED_ENCAPSULATION")] IdentypiedEncapsulation = 10,
    [pbr::OriginalName("STATISTICS_REPLAY")] StatisticsReplay = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  /// </summary>
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      sequence_ = other.sequence_;
      opcode_ = other.opcode_;
      messageData_ = other.messageData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "opcode" field.</summary>
    public const int OpcodeFieldNumber = 2;
    private global::MedcicProto.OPCODE opcode_ = 0;
    /// <summary>
    /// Opcode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MedcicProto.OPCODE Opcode {
      get { return opcode_; }
      set {
        opcode_ = value;
      }
    }

    /// <summary>Field number for the "message_data" field.</summary>
    public const int MessageDataFieldNumber = 3;
    private pb::ByteString messageData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageData {
      get { return messageData_; }
      set {
        messageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (Opcode != other.Opcode) return false;
      if (MessageData != other.MessageData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (Opcode != 0) hash ^= Opcode.GetHashCode();
      if (MessageData.Length != 0) hash ^= MessageData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sequence);
      }
      if (Opcode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Opcode);
      }
      if (MessageData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (Opcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opcode);
      }
      if (MessageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.Opcode != 0) {
        Opcode = other.Opcode;
      }
      if (other.MessageData.Length != 0) {
        MessageData = other.MessageData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sequence = input.ReadInt32();
            break;
          }
          case 16: {
            opcode_ = (global::MedcicProto.OPCODE) input.ReadEnum();
            break;
          }
          case 26: {
            MessageData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This command should be sent to start processing bitstream
  /// </summary>
  public sealed partial class AutomaticStartCommand : pb::IMessage<AutomaticStartCommand> {
    private static readonly pb::MessageParser<AutomaticStartCommand> _parser = new pb::MessageParser<AutomaticStartCommand>(() => new AutomaticStartCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutomaticStartCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutomaticStartCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutomaticStartCommand(AutomaticStartCommand other) : this() {
      input1Url_ = other.input1Url_;
      input2Url_ = other.input2Url_;
      output1Url_ = other.output1Url_;
      output2Url_ = other.output2Url_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutomaticStartCommand Clone() {
      return new AutomaticStartCommand(this);
    }

    /// <summary>Field number for the "input1_url" field.</summary>
    public const int Input1UrlFieldNumber = 1;
    private string input1Url_ = "";
    /// <summary>
    /// The output url. The format should be udp://&lt;host ip>:port or for the swFE file://&lt;full path with filename and extention>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Input1Url {
      get { return input1Url_; }
      set {
        input1Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input2_url" field.</summary>
    public const int Input2UrlFieldNumber = 2;
    private string input2Url_ = "";
    /// <summary>
    /// see input1_url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Input2Url {
      get { return input2Url_; }
      set {
        input2Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output1_url" field.</summary>
    public const int Output1UrlFieldNumber = 3;
    private string output1Url_ = "";
    /// <summary>
    /// The output url. The format should be udp://&lt;host ip>:port or file://&lt;full path with filename and extention>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output1Url {
      get { return output1Url_; }
      set {
        output1Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output2_url" field.</summary>
    public const int Output2UrlFieldNumber = 4;
    private string output2Url_ = "";
    /// <summary>
    /// see output1_url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output2Url {
      get { return output2Url_; }
      set {
        output2Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutomaticStartCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutomaticStartCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Input1Url != other.Input1Url) return false;
      if (Input2Url != other.Input2Url) return false;
      if (Output1Url != other.Output1Url) return false;
      if (Output2Url != other.Output2Url) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Input1Url.Length != 0) hash ^= Input1Url.GetHashCode();
      if (Input2Url.Length != 0) hash ^= Input2Url.GetHashCode();
      if (Output1Url.Length != 0) hash ^= Output1Url.GetHashCode();
      if (Output2Url.Length != 0) hash ^= Output2Url.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Input1Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Input1Url);
      }
      if (Input2Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Input2Url);
      }
      if (Output1Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Output1Url);
      }
      if (Output2Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Output2Url);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Input1Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Input1Url);
      }
      if (Input2Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Input2Url);
      }
      if (Output1Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output1Url);
      }
      if (Output2Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output2Url);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutomaticStartCommand other) {
      if (other == null) {
        return;
      }
      if (other.Input1Url.Length != 0) {
        Input1Url = other.Input1Url;
      }
      if (other.Input2Url.Length != 0) {
        Input2Url = other.Input2Url;
      }
      if (other.Output1Url.Length != 0) {
        Output1Url = other.Output1Url;
      }
      if (other.Output2Url.Length != 0) {
        Output2Url = other.Output2Url;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Input1Url = input.ReadString();
            break;
          }
          case 18: {
            Input2Url = input.ReadString();
            break;
          }
          case 26: {
            Output1Url = input.ReadString();
            break;
          }
          case 34: {
            Output2Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This command should be sent to start processing bitstream
  /// </summary>
  public sealed partial class StartCommand : pb::IMessage<StartCommand> {
    private static readonly pb::MessageParser<StartCommand> _parser = new pb::MessageParser<StartCommand>(() => new StartCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartCommand(StartCommand other) : this() {
      input1Url_ = other.input1Url_;
      input2Url_ = other.input2Url_;
      output1Url_ = other.output1Url_;
      output2Url_ = other.output2Url_;
      encapsulation_ = other.encapsulation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartCommand Clone() {
      return new StartCommand(this);
    }

    /// <summary>Field number for the "input1_url" field.</summary>
    public const int Input1UrlFieldNumber = 1;
    private string input1Url_ = "";
    /// <summary>
    /// The output url. The format should be udp://&lt;host ip>:port or for the swFE file://&lt;full path with filename and extention>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Input1Url {
      get { return input1Url_; }
      set {
        input1Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input2_url" field.</summary>
    public const int Input2UrlFieldNumber = 2;
    private string input2Url_ = "";
    /// <summary>
    /// see input1_url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Input2Url {
      get { return input2Url_; }
      set {
        input2Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output1_url" field.</summary>
    public const int Output1UrlFieldNumber = 3;
    private string output1Url_ = "";
    /// <summary>
    /// The output url. The format should be udp://&lt;host ip>:port or file://&lt;full path with filename and extention>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output1Url {
      get { return output1Url_; }
      set {
        output1Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output2_url" field.</summary>
    public const int Output2UrlFieldNumber = 4;
    private string output2Url_ = "";
    /// <summary>
    /// see output1_url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Output2Url {
      get { return output2Url_; }
      set {
        output2Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encapsulation" field.</summary>
    public const int EncapsulationFieldNumber = 5;
    private global::MedcicProto.ENCAPSULATION encapsulation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MedcicProto.ENCAPSULATION Encapsulation {
      get { return encapsulation_; }
      set {
        encapsulation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Input1Url != other.Input1Url) return false;
      if (Input2Url != other.Input2Url) return false;
      if (Output1Url != other.Output1Url) return false;
      if (Output2Url != other.Output2Url) return false;
      if (Encapsulation != other.Encapsulation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Input1Url.Length != 0) hash ^= Input1Url.GetHashCode();
      if (Input2Url.Length != 0) hash ^= Input2Url.GetHashCode();
      if (Output1Url.Length != 0) hash ^= Output1Url.GetHashCode();
      if (Output2Url.Length != 0) hash ^= Output2Url.GetHashCode();
      if (Encapsulation != 0) hash ^= Encapsulation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Input1Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Input1Url);
      }
      if (Input2Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Input2Url);
      }
      if (Output1Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Output1Url);
      }
      if (Output2Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Output2Url);
      }
      if (Encapsulation != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Encapsulation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Input1Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Input1Url);
      }
      if (Input2Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Input2Url);
      }
      if (Output1Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output1Url);
      }
      if (Output2Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Output2Url);
      }
      if (Encapsulation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encapsulation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartCommand other) {
      if (other == null) {
        return;
      }
      if (other.Input1Url.Length != 0) {
        Input1Url = other.Input1Url;
      }
      if (other.Input2Url.Length != 0) {
        Input2Url = other.Input2Url;
      }
      if (other.Output1Url.Length != 0) {
        Output1Url = other.Output1Url;
      }
      if (other.Output2Url.Length != 0) {
        Output2Url = other.Output2Url;
      }
      if (other.Encapsulation != 0) {
        Encapsulation = other.Encapsulation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Input1Url = input.ReadString();
            break;
          }
          case 18: {
            Input2Url = input.ReadString();
            break;
          }
          case 26: {
            Output1Url = input.ReadString();
            break;
          }
          case 34: {
            Output2Url = input.ReadString();
            break;
          }
          case 40: {
            encapsulation_ = (global::MedcicProto.ENCAPSULATION) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This command stops the mediation
  /// </summary>
  public sealed partial class StopCommand : pb::IMessage<StopCommand> {
    private static readonly pb::MessageParser<StopCommand> _parser = new pb::MessageParser<StopCommand>(() => new StopCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopCommand(StopCommand other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopCommand Clone() {
      return new StopCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopCommand other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// This replay us sent as responce to START_CMD or STOP_CMD
  /// </summary>
  public sealed partial class Ack : pb::IMessage<Ack> {
    private static readonly pb::MessageParser<Ack> _parser = new pb::MessageParser<Ack>(() => new Ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack(Ack other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack Clone() {
      return new Ack(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ack other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// This replay us sent as responce to START_CMD or STOP_CMD
  /// </summary>
  public sealed partial class Nack : pb::IMessage<Nack> {
    private static readonly pb::MessageParser<Nack> _parser = new pb::MessageParser<Nack>(() => new Nack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Nack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nack(Nack other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nack Clone() {
      return new Nack(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Nack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Nack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Nack other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// This should be sent in order to get StatusReplay
  /// </summary>
  public sealed partial class StatusRequest : pb::IMessage<StatusRequest> {
    private static readonly pb::MessageParser<StatusRequest> _parser = new pb::MessageParser<StatusRequest>(() => new StatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest(StatusRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest Clone() {
      return new StatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// This replay is sent as response to StatusRequest, ss event for new warning/error or when ever the status changes, new warning 
  /// </summary>
  public sealed partial class StatusReplay : pb::IMessage<StatusReplay> {
    private static readonly pb::MessageParser<StatusReplay> _parser = new pb::MessageParser<StatusReplay>(() => new StatusReplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusReplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusReplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusReplay(StatusReplay other) : this() {
      status_ = other.status_;
      cic1Input_ = other.cic1Input_;
      cic2Input_ = other.cic2Input_;
      cic1Output_ = other.cic1Output_;
      cic2Output_ = other.cic2Output_;
      statusDescription_ = other.statusDescription_;
      warning_ = other.warning_;
      warningMessage_ = other.warningMessage_;
      warningNumber_ = other.warningNumber_;
      error_ = other.error_;
      errorMMessage_ = other.errorMMessage_;
      errorNumber_ = other.errorNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusReplay Clone() {
      return new StatusReplay(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::MedcicProto.STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MedcicProto.STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "cic1Input" field.</summary>
    public const int Cic1InputFieldNumber = 2;
    private global::MedcicProto.CHANEL_STATUS cic1Input_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MedcicProto.CHANEL_STATUS Cic1Input {
      get { return cic1Input_; }
      set {
        cic1Input_ = value;
      }
    }

    /// <summary>Field number for the "cic2Input" field.</summary>
    public const int Cic2InputFieldNumber = 3;
    private global::MedcicProto.CHANEL_STATUS cic2Input_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MedcicProto.CHANEL_STATUS Cic2Input {
      get { return cic2Input_; }
      set {
        cic2Input_ = value;
      }
    }

    /// <summary>Field number for the "cic1Output" field.</summary>
    public const int Cic1OutputFieldNumber = 4;
    private global::MedcicProto.CHANEL_STATUS cic1Output_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MedcicProto.CHANEL_STATUS Cic1Output {
      get { return cic1Output_; }
      set {
        cic1Output_ = value;
      }
    }

    /// <summary>Field number for the "cic2Output" field.</summary>
    public const int Cic2OutputFieldNumber = 5;
    private global::MedcicProto.CHANEL_STATUS cic2Output_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MedcicProto.CHANEL_STATUS Cic2Output {
      get { return cic2Output_; }
      set {
        cic2Output_ = value;
      }
    }

    /// <summary>Field number for the "status_description" field.</summary>
    public const int StatusDescriptionFieldNumber = 6;
    private string statusDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusDescription {
      get { return statusDescription_; }
      set {
        statusDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "warning" field.</summary>
    public const int WarningFieldNumber = 7;
    private bool warning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Warning {
      get { return warning_; }
      set {
        warning_ = value;
      }
    }

    /// <summary>Field number for the "warning_message" field.</summary>
    public const int WarningMessageFieldNumber = 8;
    private string warningMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WarningMessage {
      get { return warningMessage_; }
      set {
        warningMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "warning_number" field.</summary>
    public const int WarningNumberFieldNumber = 9;
    private int warningNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarningNumber {
      get { return warningNumber_; }
      set {
        warningNumber_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 10;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "error_mMessage" field.</summary>
    public const int ErrorMMessageFieldNumber = 11;
    private string errorMMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMMessage {
      get { return errorMMessage_; }
      set {
        errorMMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_number" field.</summary>
    public const int ErrorNumberFieldNumber = 12;
    private int errorNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorNumber {
      get { return errorNumber_; }
      set {
        errorNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusReplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusReplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Cic1Input != other.Cic1Input) return false;
      if (Cic2Input != other.Cic2Input) return false;
      if (Cic1Output != other.Cic1Output) return false;
      if (Cic2Output != other.Cic2Output) return false;
      if (StatusDescription != other.StatusDescription) return false;
      if (Warning != other.Warning) return false;
      if (WarningMessage != other.WarningMessage) return false;
      if (WarningNumber != other.WarningNumber) return false;
      if (Error != other.Error) return false;
      if (ErrorMMessage != other.ErrorMMessage) return false;
      if (ErrorNumber != other.ErrorNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Cic1Input != 0) hash ^= Cic1Input.GetHashCode();
      if (Cic2Input != 0) hash ^= Cic2Input.GetHashCode();
      if (Cic1Output != 0) hash ^= Cic1Output.GetHashCode();
      if (Cic2Output != 0) hash ^= Cic2Output.GetHashCode();
      if (StatusDescription.Length != 0) hash ^= StatusDescription.GetHashCode();
      if (Warning != false) hash ^= Warning.GetHashCode();
      if (WarningMessage.Length != 0) hash ^= WarningMessage.GetHashCode();
      if (WarningNumber != 0) hash ^= WarningNumber.GetHashCode();
      if (Error != false) hash ^= Error.GetHashCode();
      if (ErrorMMessage.Length != 0) hash ^= ErrorMMessage.GetHashCode();
      if (ErrorNumber != 0) hash ^= ErrorNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Cic1Input != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Cic1Input);
      }
      if (Cic2Input != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Cic2Input);
      }
      if (Cic1Output != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Cic1Output);
      }
      if (Cic2Output != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Cic2Output);
      }
      if (StatusDescription.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StatusDescription);
      }
      if (Warning != false) {
        output.WriteRawTag(56);
        output.WriteBool(Warning);
      }
      if (WarningMessage.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WarningMessage);
      }
      if (WarningNumber != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WarningNumber);
      }
      if (Error != false) {
        output.WriteRawTag(80);
        output.WriteBool(Error);
      }
      if (ErrorMMessage.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ErrorMMessage);
      }
      if (ErrorNumber != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ErrorNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Cic1Input != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cic1Input);
      }
      if (Cic2Input != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cic2Input);
      }
      if (Cic1Output != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cic1Output);
      }
      if (Cic2Output != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cic2Output);
      }
      if (StatusDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusDescription);
      }
      if (Warning != false) {
        size += 1 + 1;
      }
      if (WarningMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WarningMessage);
      }
      if (WarningNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningNumber);
      }
      if (Error != false) {
        size += 1 + 1;
      }
      if (ErrorMMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMMessage);
      }
      if (ErrorNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusReplay other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Cic1Input != 0) {
        Cic1Input = other.Cic1Input;
      }
      if (other.Cic2Input != 0) {
        Cic2Input = other.Cic2Input;
      }
      if (other.Cic1Output != 0) {
        Cic1Output = other.Cic1Output;
      }
      if (other.Cic2Output != 0) {
        Cic2Output = other.Cic2Output;
      }
      if (other.StatusDescription.Length != 0) {
        StatusDescription = other.StatusDescription;
      }
      if (other.Warning != false) {
        Warning = other.Warning;
      }
      if (other.WarningMessage.Length != 0) {
        WarningMessage = other.WarningMessage;
      }
      if (other.WarningNumber != 0) {
        WarningNumber = other.WarningNumber;
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.ErrorMMessage.Length != 0) {
        ErrorMMessage = other.ErrorMMessage;
      }
      if (other.ErrorNumber != 0) {
        ErrorNumber = other.ErrorNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::MedcicProto.STATUS) input.ReadEnum();
            break;
          }
          case 16: {
            cic1Input_ = (global::MedcicProto.CHANEL_STATUS) input.ReadEnum();
            break;
          }
          case 24: {
            cic2Input_ = (global::MedcicProto.CHANEL_STATUS) input.ReadEnum();
            break;
          }
          case 32: {
            cic1Output_ = (global::MedcicProto.CHANEL_STATUS) input.ReadEnum();
            break;
          }
          case 40: {
            cic2Output_ = (global::MedcicProto.CHANEL_STATUS) input.ReadEnum();
            break;
          }
          case 50: {
            StatusDescription = input.ReadString();
            break;
          }
          case 56: {
            Warning = input.ReadBool();
            break;
          }
          case 66: {
            WarningMessage = input.ReadString();
            break;
          }
          case 72: {
            WarningNumber = input.ReadInt32();
            break;
          }
          case 80: {
            Error = input.ReadBool();
            break;
          }
          case 90: {
            ErrorMMessage = input.ReadString();
            break;
          }
          case 96: {
            ErrorNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message is sent to display status text message
  /// </summary>
  public sealed partial class StatusMessage : pb::IMessage<StatusMessage> {
    private static readonly pb::MessageParser<StatusMessage> _parser = new pb::MessageParser<StatusMessage>(() => new StatusMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage(StatusMessage other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage Clone() {
      return new StatusMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This command should be sent to start processing bitstream
  /// </summary>
  public sealed partial class GetSampleFile : pb::IMessage<GetSampleFile> {
    private static readonly pb::MessageParser<GetSampleFile> _parser = new pb::MessageParser<GetSampleFile>(() => new GetSampleFile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSampleFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSampleFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSampleFile(GetSampleFile other) : this() {
      inputUrl_ = other.inputUrl_;
      filename_ = other.filename_;
      duration_ = other.duration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSampleFile Clone() {
      return new GetSampleFile(this);
    }

    /// <summary>Field number for the "input_url" field.</summary>
    public const int InputUrlFieldNumber = 1;
    private string inputUrl_ = "";
    /// <summary>
    /// The intput url.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputUrl {
      get { return inputUrl_; }
      set {
        inputUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 2;
    private string filename_ = "";
    /// <summary>
    /// sample filename
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private int duration_;
    /// <summary>
    ///duration in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSampleFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSampleFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputUrl != other.InputUrl) return false;
      if (Filename != other.Filename) return false;
      if (Duration != other.Duration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InputUrl.Length != 0) hash ^= InputUrl.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InputUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InputUrl);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filename);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InputUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputUrl);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSampleFile other) {
      if (other == null) {
        return;
      }
      if (other.InputUrl.Length != 0) {
        InputUrl = other.InputUrl;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InputUrl = input.ReadString();
            break;
          }
          case 18: {
            Filename = input.ReadString();
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This should be sent in order to inform on discovered encapsulation
  /// </summary>
  public sealed partial class IdentifiedEncapsulation : pb::IMessage<IdentifiedEncapsulation> {
    private static readonly pb::MessageParser<IdentifiedEncapsulation> _parser = new pb::MessageParser<IdentifiedEncapsulation>(() => new IdentifiedEncapsulation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentifiedEncapsulation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifiedEncapsulation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifiedEncapsulation(IdentifiedEncapsulation other) : this() {
      encapsulation_ = other.encapsulation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifiedEncapsulation Clone() {
      return new IdentifiedEncapsulation(this);
    }

    /// <summary>Field number for the "encapsulation" field.</summary>
    public const int EncapsulationFieldNumber = 1;
    private global::MedcicProto.ENCAPSULATION encapsulation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MedcicProto.ENCAPSULATION Encapsulation {
      get { return encapsulation_; }
      set {
        encapsulation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentifiedEncapsulation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentifiedEncapsulation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Encapsulation != other.Encapsulation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Encapsulation != 0) hash ^= Encapsulation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Encapsulation != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Encapsulation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Encapsulation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encapsulation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentifiedEncapsulation other) {
      if (other == null) {
        return;
      }
      if (other.Encapsulation != 0) {
        Encapsulation = other.Encapsulation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            encapsulation_ = (global::MedcicProto.ENCAPSULATION) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This should be sent in order to update counters
  /// </summary>
  public sealed partial class StatisticsReplay : pb::IMessage<StatisticsReplay> {
    private static readonly pb::MessageParser<StatisticsReplay> _parser = new pb::MessageParser<StatisticsReplay>(() => new StatisticsReplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatisticsReplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MedcicProto.MedCicReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatisticsReplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatisticsReplay(StatisticsReplay other) : this() {
      cic1InputByteCounter_ = other.cic1InputByteCounter_;
      cic2InputByteCounter_ = other.cic2InputByteCounter_;
      cic1OutputByteCounter_ = other.cic1OutputByteCounter_;
      cic2OutputByteCounter_ = other.cic2OutputByteCounter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatisticsReplay Clone() {
      return new StatisticsReplay(this);
    }

    /// <summary>Field number for the "Cic1InputByteCounter" field.</summary>
    public const int Cic1InputByteCounterFieldNumber = 1;
    private long cic1InputByteCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cic1InputByteCounter {
      get { return cic1InputByteCounter_; }
      set {
        cic1InputByteCounter_ = value;
      }
    }

    /// <summary>Field number for the "Cic2InputByteCounter" field.</summary>
    public const int Cic2InputByteCounterFieldNumber = 2;
    private long cic2InputByteCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cic2InputByteCounter {
      get { return cic2InputByteCounter_; }
      set {
        cic2InputByteCounter_ = value;
      }
    }

    /// <summary>Field number for the "Cic1OutputByteCounter" field.</summary>
    public const int Cic1OutputByteCounterFieldNumber = 3;
    private long cic1OutputByteCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cic1OutputByteCounter {
      get { return cic1OutputByteCounter_; }
      set {
        cic1OutputByteCounter_ = value;
      }
    }

    /// <summary>Field number for the "Cic2OutputByteCounter" field.</summary>
    public const int Cic2OutputByteCounterFieldNumber = 4;
    private long cic2OutputByteCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cic2OutputByteCounter {
      get { return cic2OutputByteCounter_; }
      set {
        cic2OutputByteCounter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatisticsReplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatisticsReplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cic1InputByteCounter != other.Cic1InputByteCounter) return false;
      if (Cic2InputByteCounter != other.Cic2InputByteCounter) return false;
      if (Cic1OutputByteCounter != other.Cic1OutputByteCounter) return false;
      if (Cic2OutputByteCounter != other.Cic2OutputByteCounter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cic1InputByteCounter != 0L) hash ^= Cic1InputByteCounter.GetHashCode();
      if (Cic2InputByteCounter != 0L) hash ^= Cic2InputByteCounter.GetHashCode();
      if (Cic1OutputByteCounter != 0L) hash ^= Cic1OutputByteCounter.GetHashCode();
      if (Cic2OutputByteCounter != 0L) hash ^= Cic2OutputByteCounter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cic1InputByteCounter != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Cic1InputByteCounter);
      }
      if (Cic2InputByteCounter != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Cic2InputByteCounter);
      }
      if (Cic1OutputByteCounter != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Cic1OutputByteCounter);
      }
      if (Cic2OutputByteCounter != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Cic2OutputByteCounter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cic1InputByteCounter != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cic1InputByteCounter);
      }
      if (Cic2InputByteCounter != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cic2InputByteCounter);
      }
      if (Cic1OutputByteCounter != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cic1OutputByteCounter);
      }
      if (Cic2OutputByteCounter != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cic2OutputByteCounter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatisticsReplay other) {
      if (other == null) {
        return;
      }
      if (other.Cic1InputByteCounter != 0L) {
        Cic1InputByteCounter = other.Cic1InputByteCounter;
      }
      if (other.Cic2InputByteCounter != 0L) {
        Cic2InputByteCounter = other.Cic2InputByteCounter;
      }
      if (other.Cic1OutputByteCounter != 0L) {
        Cic1OutputByteCounter = other.Cic1OutputByteCounter;
      }
      if (other.Cic2OutputByteCounter != 0L) {
        Cic2OutputByteCounter = other.Cic2OutputByteCounter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cic1InputByteCounter = input.ReadInt64();
            break;
          }
          case 16: {
            Cic2InputByteCounter = input.ReadInt64();
            break;
          }
          case 24: {
            Cic1OutputByteCounter = input.ReadInt64();
            break;
          }
          case 32: {
            Cic2OutputByteCounter = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
