// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cygnus.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CygnusProto {

  /// <summary>Holder for reflection information generated from Cygnus.proto</summary>
  public static partial class CygnusReflection {

    #region Descriptor
    /// <summary>File descriptor for Cygnus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CygnusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDeWdudXMucHJvdG8SDGN5Z251c19wcm90byJWCgZIZWFkZXISEAoIc2Vx",
            "dWVuY2UYASABKAUSJAoGb3Bjb2RlGAIgASgOMhQuY3lnbnVzX3Byb3RvLk9Q",
            "Q09ERRIUCgxtZXNzYWdlX2RhdGEYAyABKAwiaAoMU3RhcnRDb21tYW5kEhIK",
            "CmlucHV0MV91cmwYASABKAkSEgoKaW5wdXQyX3VybBgCIAEoCRIPCgdFMVBv",
            "cnQxGAMgASgFEg8KB0UxUG9ydDIYBCABKAUSDgoGQm94VXJsGAUgASgJIg0K",
            "C1N0b3BDb21tYW5kIgUKA0FjayIGCgROYWNrIg8KDVN0YXR1c1JlcXVlc3Qi",
            "qwMKDFN0YXR1c1JlcGxheRIkCgZzdGF0dXMYASABKA4yFC5jeWdudXNfcHJv",
            "dG8uU1RBVFVTEhkKEVN0cmVhbTFJbnB1dEJ5dGVzGAIgASgDEhkKEVN0cmVh",
            "bTJJbnB1dEJ5dGVzGAMgASgDEhMKC091dHB1dEJ5dGVzGAQgASgDEhoKEnN0",
            "YXR1c19kZXNjcmlwdGlvbhgFIAEoCRIPCgd3YXJuaW5nGAYgASgIEhcKD3dh",
            "cm5pbmdfbWVzc2FnZRgHIAEoCRIWCg53YXJuaW5nX251bWJlchgIIAEoBRIN",
            "CgVlcnJvchgJIAEoCBIWCg5lcnJvcl9tTWVzc2FnZRgKIAEoCRIUCgxlcnJv",
            "cl9udW1iZXIYCyABKAUSHQoVT3Jpb25Db25uZWN0aW9uU3RhdHVzGAwgASgI",
            "Eh8KF0UxUG9ydDFDb25uZWN0aW9uU3RhdHVzGA0gASgIEh8KF0UxUG9ydDJD",
            "b25uZWN0aW9uU3RhdHVzGA4gASgIEhYKDlBvcnQxUXVldWVTaXplGA8gASgF",
            "EhYKDlBvcnQyUXVldWVTaXplGBAgASgFIiAKDVN0YXR1c01lc3NhZ2USDwoH",
            "bWVzc2FnZRgBIAEoCSozCgZTVEFUVVMSBwoDUlVOEAASCAoEU1RPUBABEgkK",
            "BUVSUk9SEAISCwoHV0FSTklORxADKjcKDUNIQU5FTF9TVEFUVVMSCwoHVU5L",
            "Tk9XThAAEg8KC09VVF9PRl9TWU5DEAESCAoEU1lOQxACKn8KBk9QQ09ERRIK",
            "CgZIRUFERVIQABIHCgNBQ0sQARIICgROQUNLEAISDQoJU1RBUlRfQ01EEAMS",
            "DAoIU1RPUF9DTUQQBBISCg5TVEFUVVNfUkVRVUVTVBAFEhEKDVNUQVRVU19S",
            "RVBMQVkQBhISCg5TVEFUVVNfTUVTU0FHRRAHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CygnusProto.STATUS), typeof(global::CygnusProto.CHANEL_STATUS), typeof(global::CygnusProto.OPCODE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CygnusProto.Header), global::CygnusProto.Header.Parser, new[]{ "Sequence", "Opcode", "MessageData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CygnusProto.StartCommand), global::CygnusProto.StartCommand.Parser, new[]{ "Input1Url", "Input2Url", "E1Port1", "E1Port2", "BoxUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CygnusProto.StopCommand), global::CygnusProto.StopCommand.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CygnusProto.Ack), global::CygnusProto.Ack.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CygnusProto.Nack), global::CygnusProto.Nack.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CygnusProto.StatusRequest), global::CygnusProto.StatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CygnusProto.StatusReplay), global::CygnusProto.StatusReplay.Parser, new[]{ "Status", "Stream1InputBytes", "Stream2InputBytes", "OutputBytes", "StatusDescription", "Warning", "WarningMessage", "WarningNumber", "Error", "ErrorMMessage", "ErrorNumber", "OrionConnectionStatus", "E1Port1ConnectionStatus", "E1Port2ConnectionStatus", "Port1QueueSize", "Port2QueueSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CygnusProto.StatusMessage), global::CygnusProto.StatusMessage.Parser, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum STATUS {
    [pbr::OriginalName("RUN")] Run = 0,
    [pbr::OriginalName("STOP")] Stop = 1,
    [pbr::OriginalName("ERROR")] Error = 2,
    [pbr::OriginalName("WARNING")] Warning = 3,
  }

  public enum CHANEL_STATUS {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("OUT_OF_SYNC")] OutOfSync = 1,
    [pbr::OriginalName("SYNC")] Sync = 2,
  }

  public enum OPCODE {
    [pbr::OriginalName("HEADER")] Header = 0,
    [pbr::OriginalName("ACK")] Ack = 1,
    [pbr::OriginalName("NACK")] Nack = 2,
    [pbr::OriginalName("START_CMD")] StartCmd = 3,
    [pbr::OriginalName("STOP_CMD")] StopCmd = 4,
    [pbr::OriginalName("STATUS_REQUEST")] StatusRequest = 5,
    [pbr::OriginalName("STATUS_REPLAY")] StatusReplay = 6,
    [pbr::OriginalName("STATUS_MESSAGE")] StatusMessage = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  /// </summary>
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CygnusProto.CygnusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      sequence_ = other.sequence_;
      opcode_ = other.opcode_;
      messageData_ = other.messageData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "opcode" field.</summary>
    public const int OpcodeFieldNumber = 2;
    private global::CygnusProto.OPCODE opcode_ = 0;
    /// <summary>
    /// Opcode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CygnusProto.OPCODE Opcode {
      get { return opcode_; }
      set {
        opcode_ = value;
      }
    }

    /// <summary>Field number for the "message_data" field.</summary>
    public const int MessageDataFieldNumber = 3;
    private pb::ByteString messageData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageData {
      get { return messageData_; }
      set {
        messageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (Opcode != other.Opcode) return false;
      if (MessageData != other.MessageData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (Opcode != 0) hash ^= Opcode.GetHashCode();
      if (MessageData.Length != 0) hash ^= MessageData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sequence);
      }
      if (Opcode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Opcode);
      }
      if (MessageData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (Opcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opcode);
      }
      if (MessageData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.Opcode != 0) {
        Opcode = other.Opcode;
      }
      if (other.MessageData.Length != 0) {
        MessageData = other.MessageData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sequence = input.ReadInt32();
            break;
          }
          case 16: {
            opcode_ = (global::CygnusProto.OPCODE) input.ReadEnum();
            break;
          }
          case 26: {
            MessageData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This command should be sent to start processing bitstream
  /// </summary>
  public sealed partial class StartCommand : pb::IMessage<StartCommand> {
    private static readonly pb::MessageParser<StartCommand> _parser = new pb::MessageParser<StartCommand>(() => new StartCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CygnusProto.CygnusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartCommand(StartCommand other) : this() {
      input1Url_ = other.input1Url_;
      input2Url_ = other.input2Url_;
      e1Port1_ = other.e1Port1_;
      e1Port2_ = other.e1Port2_;
      boxUrl_ = other.boxUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartCommand Clone() {
      return new StartCommand(this);
    }

    /// <summary>Field number for the "input1_url" field.</summary>
    public const int Input1UrlFieldNumber = 1;
    private string input1Url_ = "";
    /// <summary>
    /// The iutput url. The format should be udp://&lt;host ip>:port or for the swFE file://&lt;full path with filename and extention>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Input1Url {
      get { return input1Url_; }
      set {
        input1Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input2_url" field.</summary>
    public const int Input2UrlFieldNumber = 2;
    private string input2Url_ = "";
    /// <summary>
    /// see input1_url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Input2Url {
      get { return input2Url_; }
      set {
        input2Url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "E1Port1" field.</summary>
    public const int E1Port1FieldNumber = 3;
    private int e1Port1_;
    /// <summary>
    /// The Orion box physical port number 1 to 32
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int E1Port1 {
      get { return e1Port1_; }
      set {
        e1Port1_ = value;
      }
    }

    /// <summary>Field number for the "E1Port2" field.</summary>
    public const int E1Port2FieldNumber = 4;
    private int e1Port2_;
    /// <summary>
    /// see E1Port1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int E1Port2 {
      get { return e1Port2_; }
      set {
        e1Port2_ = value;
      }
    }

    /// <summary>Field number for the "BoxUrl" field.</summary>
    public const int BoxUrlFieldNumber = 5;
    private string boxUrl_ = "";
    /// <summary>
    /// The output url. The format should be udp://&lt;host ip>:port where port == the Orion port
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxUrl {
      get { return boxUrl_; }
      set {
        boxUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Input1Url != other.Input1Url) return false;
      if (Input2Url != other.Input2Url) return false;
      if (E1Port1 != other.E1Port1) return false;
      if (E1Port2 != other.E1Port2) return false;
      if (BoxUrl != other.BoxUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Input1Url.Length != 0) hash ^= Input1Url.GetHashCode();
      if (Input2Url.Length != 0) hash ^= Input2Url.GetHashCode();
      if (E1Port1 != 0) hash ^= E1Port1.GetHashCode();
      if (E1Port2 != 0) hash ^= E1Port2.GetHashCode();
      if (BoxUrl.Length != 0) hash ^= BoxUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Input1Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Input1Url);
      }
      if (Input2Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Input2Url);
      }
      if (E1Port1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(E1Port1);
      }
      if (E1Port2 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(E1Port2);
      }
      if (BoxUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BoxUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Input1Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Input1Url);
      }
      if (Input2Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Input2Url);
      }
      if (E1Port1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(E1Port1);
      }
      if (E1Port2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(E1Port2);
      }
      if (BoxUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoxUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartCommand other) {
      if (other == null) {
        return;
      }
      if (other.Input1Url.Length != 0) {
        Input1Url = other.Input1Url;
      }
      if (other.Input2Url.Length != 0) {
        Input2Url = other.Input2Url;
      }
      if (other.E1Port1 != 0) {
        E1Port1 = other.E1Port1;
      }
      if (other.E1Port2 != 0) {
        E1Port2 = other.E1Port2;
      }
      if (other.BoxUrl.Length != 0) {
        BoxUrl = other.BoxUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Input1Url = input.ReadString();
            break;
          }
          case 18: {
            Input2Url = input.ReadString();
            break;
          }
          case 24: {
            E1Port1 = input.ReadInt32();
            break;
          }
          case 32: {
            E1Port2 = input.ReadInt32();
            break;
          }
          case 42: {
            BoxUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This command stops the mediation
  /// </summary>
  public sealed partial class StopCommand : pb::IMessage<StopCommand> {
    private static readonly pb::MessageParser<StopCommand> _parser = new pb::MessageParser<StopCommand>(() => new StopCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CygnusProto.CygnusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopCommand(StopCommand other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopCommand Clone() {
      return new StopCommand(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopCommand other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// This replay us sent as responce to START_CMD or STOP_CMD
  /// </summary>
  public sealed partial class Ack : pb::IMessage<Ack> {
    private static readonly pb::MessageParser<Ack> _parser = new pb::MessageParser<Ack>(() => new Ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CygnusProto.CygnusReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack(Ack other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ack Clone() {
      return new Ack(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ack other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// This replay us sent as responce to START_CMD or STOP_CMD
  /// </summary>
  public sealed partial class Nack : pb::IMessage<Nack> {
    private static readonly pb::MessageParser<Nack> _parser = new pb::MessageParser<Nack>(() => new Nack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Nack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CygnusProto.CygnusReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nack(Nack other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nack Clone() {
      return new Nack(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Nack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Nack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Nack other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// This should be sent in order to get StatusReplay
  /// </summary>
  public sealed partial class StatusRequest : pb::IMessage<StatusRequest> {
    private static readonly pb::MessageParser<StatusRequest> _parser = new pb::MessageParser<StatusRequest>(() => new StatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CygnusProto.CygnusReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest(StatusRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest Clone() {
      return new StatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// This replay is sent as response to StatusRequest, ss event for new warning/error or when ever the status changes, new warning 
  /// </summary>
  public sealed partial class StatusReplay : pb::IMessage<StatusReplay> {
    private static readonly pb::MessageParser<StatusReplay> _parser = new pb::MessageParser<StatusReplay>(() => new StatusReplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusReplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CygnusProto.CygnusReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusReplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusReplay(StatusReplay other) : this() {
      status_ = other.status_;
      stream1InputBytes_ = other.stream1InputBytes_;
      stream2InputBytes_ = other.stream2InputBytes_;
      outputBytes_ = other.outputBytes_;
      statusDescription_ = other.statusDescription_;
      warning_ = other.warning_;
      warningMessage_ = other.warningMessage_;
      warningNumber_ = other.warningNumber_;
      error_ = other.error_;
      errorMMessage_ = other.errorMMessage_;
      errorNumber_ = other.errorNumber_;
      orionConnectionStatus_ = other.orionConnectionStatus_;
      e1Port1ConnectionStatus_ = other.e1Port1ConnectionStatus_;
      e1Port2ConnectionStatus_ = other.e1Port2ConnectionStatus_;
      port1QueueSize_ = other.port1QueueSize_;
      port2QueueSize_ = other.port2QueueSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusReplay Clone() {
      return new StatusReplay(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::CygnusProto.STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CygnusProto.STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "Stream1InputBytes" field.</summary>
    public const int Stream1InputBytesFieldNumber = 2;
    private long stream1InputBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Stream1InputBytes {
      get { return stream1InputBytes_; }
      set {
        stream1InputBytes_ = value;
      }
    }

    /// <summary>Field number for the "Stream2InputBytes" field.</summary>
    public const int Stream2InputBytesFieldNumber = 3;
    private long stream2InputBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Stream2InputBytes {
      get { return stream2InputBytes_; }
      set {
        stream2InputBytes_ = value;
      }
    }

    /// <summary>Field number for the "OutputBytes" field.</summary>
    public const int OutputBytesFieldNumber = 4;
    private long outputBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OutputBytes {
      get { return outputBytes_; }
      set {
        outputBytes_ = value;
      }
    }

    /// <summary>Field number for the "status_description" field.</summary>
    public const int StatusDescriptionFieldNumber = 5;
    private string statusDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusDescription {
      get { return statusDescription_; }
      set {
        statusDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "warning" field.</summary>
    public const int WarningFieldNumber = 6;
    private bool warning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Warning {
      get { return warning_; }
      set {
        warning_ = value;
      }
    }

    /// <summary>Field number for the "warning_message" field.</summary>
    public const int WarningMessageFieldNumber = 7;
    private string warningMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WarningMessage {
      get { return warningMessage_; }
      set {
        warningMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "warning_number" field.</summary>
    public const int WarningNumberFieldNumber = 8;
    private int warningNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarningNumber {
      get { return warningNumber_; }
      set {
        warningNumber_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 9;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "error_mMessage" field.</summary>
    public const int ErrorMMessageFieldNumber = 10;
    private string errorMMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMMessage {
      get { return errorMMessage_; }
      set {
        errorMMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_number" field.</summary>
    public const int ErrorNumberFieldNumber = 11;
    private int errorNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorNumber {
      get { return errorNumber_; }
      set {
        errorNumber_ = value;
      }
    }

    /// <summary>Field number for the "OrionConnectionStatus" field.</summary>
    public const int OrionConnectionStatusFieldNumber = 12;
    private bool orionConnectionStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OrionConnectionStatus {
      get { return orionConnectionStatus_; }
      set {
        orionConnectionStatus_ = value;
      }
    }

    /// <summary>Field number for the "E1Port1ConnectionStatus" field.</summary>
    public const int E1Port1ConnectionStatusFieldNumber = 13;
    private bool e1Port1ConnectionStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool E1Port1ConnectionStatus {
      get { return e1Port1ConnectionStatus_; }
      set {
        e1Port1ConnectionStatus_ = value;
      }
    }

    /// <summary>Field number for the "E1Port2ConnectionStatus" field.</summary>
    public const int E1Port2ConnectionStatusFieldNumber = 14;
    private bool e1Port2ConnectionStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool E1Port2ConnectionStatus {
      get { return e1Port2ConnectionStatus_; }
      set {
        e1Port2ConnectionStatus_ = value;
      }
    }

    /// <summary>Field number for the "Port1QueueSize" field.</summary>
    public const int Port1QueueSizeFieldNumber = 15;
    private int port1QueueSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port1QueueSize {
      get { return port1QueueSize_; }
      set {
        port1QueueSize_ = value;
      }
    }

    /// <summary>Field number for the "Port2QueueSize" field.</summary>
    public const int Port2QueueSizeFieldNumber = 16;
    private int port2QueueSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port2QueueSize {
      get { return port2QueueSize_; }
      set {
        port2QueueSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusReplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusReplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Stream1InputBytes != other.Stream1InputBytes) return false;
      if (Stream2InputBytes != other.Stream2InputBytes) return false;
      if (OutputBytes != other.OutputBytes) return false;
      if (StatusDescription != other.StatusDescription) return false;
      if (Warning != other.Warning) return false;
      if (WarningMessage != other.WarningMessage) return false;
      if (WarningNumber != other.WarningNumber) return false;
      if (Error != other.Error) return false;
      if (ErrorMMessage != other.ErrorMMessage) return false;
      if (ErrorNumber != other.ErrorNumber) return false;
      if (OrionConnectionStatus != other.OrionConnectionStatus) return false;
      if (E1Port1ConnectionStatus != other.E1Port1ConnectionStatus) return false;
      if (E1Port2ConnectionStatus != other.E1Port2ConnectionStatus) return false;
      if (Port1QueueSize != other.Port1QueueSize) return false;
      if (Port2QueueSize != other.Port2QueueSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Stream1InputBytes != 0L) hash ^= Stream1InputBytes.GetHashCode();
      if (Stream2InputBytes != 0L) hash ^= Stream2InputBytes.GetHashCode();
      if (OutputBytes != 0L) hash ^= OutputBytes.GetHashCode();
      if (StatusDescription.Length != 0) hash ^= StatusDescription.GetHashCode();
      if (Warning != false) hash ^= Warning.GetHashCode();
      if (WarningMessage.Length != 0) hash ^= WarningMessage.GetHashCode();
      if (WarningNumber != 0) hash ^= WarningNumber.GetHashCode();
      if (Error != false) hash ^= Error.GetHashCode();
      if (ErrorMMessage.Length != 0) hash ^= ErrorMMessage.GetHashCode();
      if (ErrorNumber != 0) hash ^= ErrorNumber.GetHashCode();
      if (OrionConnectionStatus != false) hash ^= OrionConnectionStatus.GetHashCode();
      if (E1Port1ConnectionStatus != false) hash ^= E1Port1ConnectionStatus.GetHashCode();
      if (E1Port2ConnectionStatus != false) hash ^= E1Port2ConnectionStatus.GetHashCode();
      if (Port1QueueSize != 0) hash ^= Port1QueueSize.GetHashCode();
      if (Port2QueueSize != 0) hash ^= Port2QueueSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Stream1InputBytes != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Stream1InputBytes);
      }
      if (Stream2InputBytes != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Stream2InputBytes);
      }
      if (OutputBytes != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OutputBytes);
      }
      if (StatusDescription.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StatusDescription);
      }
      if (Warning != false) {
        output.WriteRawTag(48);
        output.WriteBool(Warning);
      }
      if (WarningMessage.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WarningMessage);
      }
      if (WarningNumber != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WarningNumber);
      }
      if (Error != false) {
        output.WriteRawTag(72);
        output.WriteBool(Error);
      }
      if (ErrorMMessage.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ErrorMMessage);
      }
      if (ErrorNumber != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ErrorNumber);
      }
      if (OrionConnectionStatus != false) {
        output.WriteRawTag(96);
        output.WriteBool(OrionConnectionStatus);
      }
      if (E1Port1ConnectionStatus != false) {
        output.WriteRawTag(104);
        output.WriteBool(E1Port1ConnectionStatus);
      }
      if (E1Port2ConnectionStatus != false) {
        output.WriteRawTag(112);
        output.WriteBool(E1Port2ConnectionStatus);
      }
      if (Port1QueueSize != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Port1QueueSize);
      }
      if (Port2QueueSize != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Port2QueueSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Stream1InputBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Stream1InputBytes);
      }
      if (Stream2InputBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Stream2InputBytes);
      }
      if (OutputBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutputBytes);
      }
      if (StatusDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusDescription);
      }
      if (Warning != false) {
        size += 1 + 1;
      }
      if (WarningMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WarningMessage);
      }
      if (WarningNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarningNumber);
      }
      if (Error != false) {
        size += 1 + 1;
      }
      if (ErrorMMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMMessage);
      }
      if (ErrorNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorNumber);
      }
      if (OrionConnectionStatus != false) {
        size += 1 + 1;
      }
      if (E1Port1ConnectionStatus != false) {
        size += 1 + 1;
      }
      if (E1Port2ConnectionStatus != false) {
        size += 1 + 1;
      }
      if (Port1QueueSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port1QueueSize);
      }
      if (Port2QueueSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Port2QueueSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusReplay other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Stream1InputBytes != 0L) {
        Stream1InputBytes = other.Stream1InputBytes;
      }
      if (other.Stream2InputBytes != 0L) {
        Stream2InputBytes = other.Stream2InputBytes;
      }
      if (other.OutputBytes != 0L) {
        OutputBytes = other.OutputBytes;
      }
      if (other.StatusDescription.Length != 0) {
        StatusDescription = other.StatusDescription;
      }
      if (other.Warning != false) {
        Warning = other.Warning;
      }
      if (other.WarningMessage.Length != 0) {
        WarningMessage = other.WarningMessage;
      }
      if (other.WarningNumber != 0) {
        WarningNumber = other.WarningNumber;
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.ErrorMMessage.Length != 0) {
        ErrorMMessage = other.ErrorMMessage;
      }
      if (other.ErrorNumber != 0) {
        ErrorNumber = other.ErrorNumber;
      }
      if (other.OrionConnectionStatus != false) {
        OrionConnectionStatus = other.OrionConnectionStatus;
      }
      if (other.E1Port1ConnectionStatus != false) {
        E1Port1ConnectionStatus = other.E1Port1ConnectionStatus;
      }
      if (other.E1Port2ConnectionStatus != false) {
        E1Port2ConnectionStatus = other.E1Port2ConnectionStatus;
      }
      if (other.Port1QueueSize != 0) {
        Port1QueueSize = other.Port1QueueSize;
      }
      if (other.Port2QueueSize != 0) {
        Port2QueueSize = other.Port2QueueSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::CygnusProto.STATUS) input.ReadEnum();
            break;
          }
          case 16: {
            Stream1InputBytes = input.ReadInt64();
            break;
          }
          case 24: {
            Stream2InputBytes = input.ReadInt64();
            break;
          }
          case 32: {
            OutputBytes = input.ReadInt64();
            break;
          }
          case 42: {
            StatusDescription = input.ReadString();
            break;
          }
          case 48: {
            Warning = input.ReadBool();
            break;
          }
          case 58: {
            WarningMessage = input.ReadString();
            break;
          }
          case 64: {
            WarningNumber = input.ReadInt32();
            break;
          }
          case 72: {
            Error = input.ReadBool();
            break;
          }
          case 82: {
            ErrorMMessage = input.ReadString();
            break;
          }
          case 88: {
            ErrorNumber = input.ReadInt32();
            break;
          }
          case 96: {
            OrionConnectionStatus = input.ReadBool();
            break;
          }
          case 104: {
            E1Port1ConnectionStatus = input.ReadBool();
            break;
          }
          case 112: {
            E1Port2ConnectionStatus = input.ReadBool();
            break;
          }
          case 120: {
            Port1QueueSize = input.ReadInt32();
            break;
          }
          case 128: {
            Port2QueueSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This message is sent to display status text message
  /// </summary>
  public sealed partial class StatusMessage : pb::IMessage<StatusMessage> {
    private static readonly pb::MessageParser<StatusMessage> _parser = new pb::MessageParser<StatusMessage>(() => new StatusMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CygnusProto.CygnusReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage(StatusMessage other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage Clone() {
      return new StatusMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
